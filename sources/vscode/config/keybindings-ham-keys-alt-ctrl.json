[
  /**
   * ham-keys (alt+ctrl), for use with a hardware keyboard layer toggle.
   **/

  // Commands
  { "key": "alt+ctrl+p", "command": "workbench.action.showCommands" },
  { "key": "alt+ctrl+g", "command": "emacs-mcx.cancel" },

  // Movement.
  { "key": "alt+ctrl+i", "command": "emacs-mcx.previousLine", "when": "editorTextFocus" },
  { "key": "alt+ctrl+j", "command": "emacs-mcx.backwardChar", "when": "editorTextFocus" },
  { "key": "alt+ctrl+k", "command": "emacs-mcx.nextLine", "when": "editorTextFocus" },
  { "key": "alt+ctrl+l", "command": "emacs-mcx.forwardChar", "when": "editorTextFocus" },

  { "key": "alt+ctrl+u", "command": "emacs-mcx.backwardWord", "when": "editorTextFocus" },
  { "key": "alt+ctrl+o", "command": "emacs-mcx.forwardWord", "when": "editorTextFocus" },

  { "key": "alt+ctrl+y", "command": "emacs-mcx.backwardParagraph", "when": "editorTextFocus" },
  { "key": "alt+ctrl+h", "command": "emacs-mcx.forwardParagraph", "when": "editorTextFocus" },

  { "key": "alt+ctrl+6", "command": "emacs-mcx.moveBeginningOfLine" },
  { "key": "alt+ctrl+7", "command": "emacs-mcx.backToIndentation" },
  { "key": "alt+ctrl+8", "command": "emacs-mcx.moveEndOfLine" },

  // Search and navigation
  { "key": "alt+ctrl+n", "command": "ham.swiper-word-at-cursor" },

  // Multi cursors
  { "key": "alt+ctrl+shift+m", "command": "emacs-mcx.addSelectionToPreviousFindMatch", "when": "editorHasSelection" },
  { "key": "alt+ctrl+shift+m", "command": "editor.action.insertCursorAbove", "when": "!editorHasSelection" },
  { "key": "alt+ctrl+m", "command": "emacs-mcx.addSelectionToNextFindMatch", "when": "editorHasSelection" },
  { "key": "alt+ctrl+m", "command": "editor.action.insertCursorBelow", "when": "!editorHasSelection" },

  // Editing
  { "key": "alt+ctrl+q", "command": "editor.action.formatSelection" },
  { "key": "alt+ctrl+shift+q", "command": "rewrap.rewrapComment" },
  { "key": "alt+ctrl+w", "command": "deleteWordRight" },
  { "key": "alt+ctrl+e", "command": "deleteWordLeft" },

  { "key": "alt+ctrl+a", "command": "expandLineSelection", "when": "editorHasSelection" },
  {
    "command": "runCommands",
    "when": "!editorHasSelection",
    "key": "alt+ctrl+a",
    "args": {
      "commands": [
        "emacs-mcx.setMarkCommand",
        "expandLineSelection",
      ]
    }
  },
  {
    "command": "runCommands",
    "when": "!editorHasSelection",
    "key": "alt+ctrl+s",
    "args": {
      "commands": [
        "emacs-mcx.moveEndOfLine",
        "emacs-mcx.newLine"
      ],
    },
  },
  {
    "command": "runCommands",
    "when": "!editorHasSelection",
    "key": "alt+ctrl+shift+s",
    "args": {
      "commands": [
        "emacs-mcx.previousLine",
        "emacs-mcx.moveEndOfLine",
        "emacs-mcx.newLine"
      ],
    },
  },
  { "key": "alt+ctrl+d", "command": "deleteRight" },

  { "key": "alt+ctrl+z", "command": "undo" },
  { "key": "alt+ctrl+shift+z", "command": "redo" },
  { "key": "alt+ctrl+x", "command": "emacs-mcx.killRegion", "when": "editorHasSelection" },
  { "key": "alt+ctrl+x", "command": "emacs-mcx.deleteForwardChar", "when": "!editorHasSelection" },
  { "key": "alt+ctrl+c", "command": "emacs-mcx.copyRegion" },
  { "key": "alt+ctrl+v", "command": "emacs-mcx.yank" },
  { "key": "alt+ctrl+shift+v", "command": "emacs-mcx.yank-pop" },

  // Comment/uncomment
  { "key": "alt+ctrl+b", "command": "editor.action.addCommentLine", "when": "editorHasSelection" },
  {
    "command": "runCommands",
    "when": "!editorHasSelection",
    "key": "alt+ctrl+b",
    "args": {
      "commands": [
        "editor.action.addCommentLine",
        "cursorDown"
      ],
    },
  },
  { "key": "alt+ctrl+shift+b", "command": "editor.action.removeCommentLine", "when": "editorHasSelection" },
  {
    "command": "runCommands",
    "key": "alt+ctrl+shift+b",
    "args": {
      "commands": [
        "editor.action.removeCommentLine",
        "cursorUp"
      ]
    }
  },

  // Visual selection
  { "key": "alt+ctrl+t", "command": "emacs-mcx.setMarkCommand" },
  {
    "command": "runCommands",
    "when": "editorHasSelection",
    "key": "alt+ctrl+r",
    "args": {
      "commands": [
        "editor.action.smartSelect.expand",
      ]
    }
  },
  {
    "command": "runCommands",
    "when": "!editorHasSelection",
    "key": "alt+ctrl+r",
    "args": {
      "commands": [
        "emacs-mcx.setMarkCommand",
        "editor.action.smartSelect.expand",
      ]
    }
  },
  {
    "command": "runCommands",
    "when": "editorHasSelection",
    "key": "alt+ctrl+shift+r",
    "args": {
      "commands": [
        "editor.action.smartSelect.shrink",
      ]
    }
  },

  // Splits
  { "key": "alt+ctrl+1", "command": "workbench.action.focusNextGroup" },
  { "key": "alt+ctrl+2", "command": "workbench.action.splitEditorDown" },
  { "key": "alt+ctrl+3", "command": "workbench.action.splitEditorRight" },
  { "key": "alt+ctrl+4", "command": "workbench.action.closeEditorsInGroup" },

  // Auto-complete
  { "key": "ctrl+/", "command": "editor.action.triggerSuggest" },

  // Leader goto locations
  { "key": "alt+ctrl+/ alt+ctrl+y", "command": "emacs-mcx.beginningOfBuffer" },
  { "key": "alt+ctrl+/ alt+ctrl+h", "command": "emacs-mcx.endOfBuffer" },
  { "key": "alt+ctrl+/ alt+ctrl+l", "command": "workbench.action.gotoLine" },
  { "key": "alt+ctrl+/ alt+ctrl+/", "command": "editor.action.jumpToBracket" },
  { "key": "alt+ctrl+/ alt+ctrl+g", "command": "workbench.action.gotoSymbol" },
  { "key": "alt+ctrl+/ alt+ctrl+,", "command": "workbench.action.navigateBack" },
  { "key": "alt+ctrl+/ alt+ctrl+.", "command": "workbench.action.navigateForward" },

  // Leader commands
  { "key": "alt+ctrl+, alt+ctrl+p", "command": "workbench.action.showCommands" },
  { "key": "alt+ctrl+, alt+ctrl+r", "command": "workbench.action.files.revert" },

  { "key": "alt+ctrl+, alt+ctrl+o", "command": "workbench.action.quickOpen" },
  { "key": "alt+ctrl+, alt+ctrl+i", "command": "breadcrumbs.focusAndSelect" },
  { "key": "alt+ctrl+, alt+ctrl+b", "command": "workbench.action.quickOpen" },
  { "key": "alt+ctrl+, alt+ctrl+d", "command": "revealInExplorer" },

  {
    "key": "alt+ctrl+, alt+ctrl+j",
    "command": "workbench.action.findInFiles"
  },
  {
    "key": "alt+ctrl+, alt+ctrl+h",
    "command": "extension.multiCommand.execute",
    "args": {
      // Set an interval such that togglePreserveCase is executed when the
      // search/replace dialog is open.
      "interval": 200,
      "sequence": [
        "emacs-mcx.queryReplaceRegexp",
        "togglePreserveCase"
      ]
    }
  },

  { "key": "alt+ctrl+, alt+ctrl+s", "command": "workbench.action.files.save" },
  { "key": "alt+ctrl+, alt+ctrl+shift+s", "command": "saveAll" },
  { "key": "alt+ctrl+, alt+ctrl+k", "command": "workbench.action.closeActiveEditor" },

  { "key": "alt+ctrl+, alt+ctrl+1", "command": "workbench.action.toggleZenMode" },

  { "key": "alt+ctrl+, alt+ctrl+a", "command": "editor.action.selectAll" },
]
