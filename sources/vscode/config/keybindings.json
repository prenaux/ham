// Place your key bindings in this file to override the defaults
[
  /**
   * Panels
   **/
  {
    "key": "ctrl+h ctrl+d",
    // revealInExplorer also opens the file explorer panel if its not open.
    "command": "revealInExplorer"
    // "command": "workbench.view.explorer"
  },
  {
    "key": "ctrl+h ctrl+g",
    "command": "workbench.view.scm"
  },
  {
    "key": "ctrl+h ctrl+x",
    "command": "workbench.extensions.action.showEnabledExtensions"
  },
  {
    "key": "ctrl+h ctrl+b",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "ctrl+h ctrl+e",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "!editorFocus"
  },
  {
    "key": "ctrl+h ctrl+t",
    "command": "workbench.action.terminal.toggleTerminal",
  },
  {
    "key": "ctrl+h ctrl+z",
    "command": "workbench.action.toggleZenMode"
  },
  {
    "key": "ctrl+h ctrl+r",
    "command": "workbench.view.extension.github-pull-requests"
  },
  {
    "key": "ctrl+h ctrl+y",
    "command": "workbench.action.quickOpenTerm"
  },

  /**
   * "Maximize" Panel & Editor.
   * If in the editor, closes the terminal panel if its visible, show it if its not.
   * If in the terminal, closes the terminal panel if its visible, show it if its not.
   */
  {
    "key": "ctrl+h ctrl+m",
    "command": "workbench.action.toggleMaximizedPanel",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+h ctrl+m",
    "command": "workbench.action.closePanel",
    "when": "editorFocus && panelVisible"
  },
  {
    "key": "ctrl+h ctrl+m",
    "command": "extension.multiCommand.execute",
    "args": {
      "sequence": [
        "workbench.action.togglePanel",
        "workbench.action.focusActiveEditorGroup"
      ]
    },
    "when": "editorFocus && !panelVisible"
  },

  /**
    * File Explorer
    **/
  {
    "key": "cmd+d",
    "command": "duplicate.execute",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "cmd+n",
    "command": "explorer.newFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "shift+cmd+n",
    "command": "explorer.newFolder",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },

  /**
    * Line Manipulation
    **/
  {
    "key": "ctrl+j",
    "command": "editor.action.joinLines",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+[",
    "command": "editor.action.outdentLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+]",
    "command": "editor.action.indentLines",
    "when": "editorTextFocus && !editorReadonly"
  },

  /**
   * Split Panels
   **/
  {
    "key": "ctrl+=",
    "command": "workbench.action.increaseViewSize",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+-",
    "command": "workbench.action.decreaseViewSize",
    "when": "editorFocus"
  },

  /**
    * Emmet
    **/
  {
    "key": "ctrl+m ctrl+i",
    "command": "editor.emmet.action.balanceIn",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+m ctrl+o",
    "command": "editor.emmet.action.balanceOut",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+m ctrl+w",
    "command": "editor.emmet.action.wrapWithAbbreviation",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+m ctrl+m",
    "command": "editor.emmet.action.matchTag",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+m ctrl+e",
    "command": "editor.action.smartSelect.expand",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+m ctrl+r",
    "command": "editor.emmet.action.updateTag",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+m ctrl+backspace",
    "command": "editor.emmet.action.removeTag",
    "when": "editorTextFocus"
  },

  /**
    * amVim Finder Fix
    **/
  {
    "key": "enter",
    "command": "editor.action.nextMatchFindAction",
    "when": "findWidgetVisible"
  },
  {
    "key": "shift+enter",
    "command": "editor.action.previousMatchFindAction",
    "when": "findWidgetVisible"
  },

  /**
   * Project Switching
   **/
  {
    "key": "ctrl+;",
    "command": "workbench.action.switchWindow"
  },

  /**
   * IntelliSense
   **/
  {
    "key": "alt+r",
    "command": "workbench.action.gotoSymbol"
  },
  {
    "key": "alt+shift+r",
    "command": "workbench.action.showAllSymbols"
  },
  {
    "key": "alt+.",
    "command": "editor.action.goToDeclaration",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+k ctrl+i",
    "command": "namespaceResolver.import",
  },

  /**
    * Hide Toaster Notifications
    **/
  {
    "key": "escape",
    "command": "notifications.hideToasts",
    "when": "notificationToastsVisible"
  },

  /**
   * Emacs
   **/
  {
    "key": "up",
    "command": "history.showPrevious",
    "when": "findInputFocussed"
  },
  {
    "key": "down",
    "command": "history.showNext",
    "when": "findInputFocussed"
  },
  {
    "key": "ctrl+up",
    "command": "emacs-mcx.backwardParagraph",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && !suggestWidgetVisible"
  },
  {
    "key": "alt+up",
    "command": "emacs-mcx.backwardParagraph",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+down",
    "command": "emacs-mcx.forwardParagraph",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && !suggestWidgetVisible"
  },
  {
    "key": "alt+down",
    "command": "emacs-mcx.forwardParagraph",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && !suggestWidgetVisible"
  },
  {
    "key": "alt+;",
    "command": "-editor.action.blockComment",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && !editorReadonly"
  },
  {
    "key": "ctrl+right",
    "command": "emacs-mcx.forwardWord",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
  },
  {
    "key": "alt+right",
    "command": "emacs-mcx.forwardWord",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
  },
  {
    "key": "ctrl+backspace",
    "command": "emacs-mcx.backwardKillWord",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && !editorReadonly"
  },
  {
    "key": "alt+backspace",
    "command": "emacs-mcx.backwardKillWord",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && !editorReadonly"
  },
  {
    "key": "alt+left",
    "command": "emacs-mcx.backwardWord",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
  },
  {
    "key": "ctrl+left",
    "command": "emacs-mcx.backwardWord",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
  },
  {
    "key": "alt+0",
    "command": "emacs-mcx.addSelectionToNextFindMatch",
    "when": "editorFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
  },
  {
    "key": "alt+9",
    "command": "emacs-mcx.addSelectionToPreviousFindMatch",
    "when": "editorFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
  },
  {
    "key": "alt+shift+p",
    "command": "editor.action.previousSelectionMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "alt+shift+n",
    "command": "editor.action.nextSelectionMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "alt+p",
    "command": "editor.action.previousSelectionMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "alt+n",
    "command": "editor.action.nextSelectionMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+h ctrl+j",
    "command": "workbench.action.findInFiles"
  },
  {
    "key": "ctrl+h ctrl+h",
    "command": "extension.multiCommand.execute",
    "args": {
      // Set an interval such that togglePreserveCase is executed when the
      // search/replace dialog is open.
      "interval": 200,
      "sequence": [
        "emacs-mcx.queryReplaceRegexp",
        "togglePreserveCase"
      ]
    }
  },
  {
    "key": "alt+9",
    "command": "editor.action.addSelectionToPreviousFindMatch"
  },
  {
    "key": "shift+alt+a",
    "command": "editor.action.smartSelect.expand",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+a",
    "command": "editor.action.jumpToBracket",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+alt+8",
    "command": "editor.action.insertCursorAtEndOfEachLineSelected",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+alt+i",
    "command": "-editor.action.insertCursorAtEndOfEachLineSelected",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+8",
    "command": "editor.action.selectHighlights",
    "when": "editorFocus"
  },
  {
    "key": "shift+alt+0",
    "command": "editor.action.insertCursorBelow",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+alt+9",
    "command": "editor.action.insertCursorAbove",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+h ctrl+a",
    "command": "emacs-mcx.beginningOfBuffer",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
  },
  {
    "key": "shift+alt+,",
    "command": "-emacs-mcx.beginningOfBuffer",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
  },
  {
    "key": "ctrl+h ctrl+e",
    "command": "emacs-mcx.endOfBuffer",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
  },
  {
    "key": "shift+alt+.",
    "command": "-emacs-mcx.endOfBuffer",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
  },
  {
    "key": "ctrl+home",
    "command": "emacs-mcx.beginningOfBuffer",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
  },
  {
    "key": "ctrl+end",
    "command": "emacs-mcx.endOfBuffer",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
  },
  {
    "key": "ctrl+alt+\\",
    "command": "editor.action.formatSelection",
    "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+alt+l",
    "command": "editor.action.formatDocument",
    "when": "editorTextFocus && !editorHasSelection"
  },
  {
    "key": "ctrl+alt+l",
    "command": "editor.action.formatSelection",
    "when": "editorTextFocus && editorHasSelection"
  },
  {
    "key": "alt+.",
    "command": "editor.action.revealDefinition",
    "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+alt+left",
    "command": "workbench.action.navigateBack",
    "when": "canNavigateBack"
  },
  {
    "key": "ctrl+alt+right",
    "command": "workbench.action.navigateForward",
    "when": "canNavigateForward"
  },
  {
    "key": "ctrl+alt+right",
    "command": "-cursorWordPartRight",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+left",
    "command": "-cursorWordPartLeft",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+x b",
    "command": "workbench.action.quickOpen"
    // "command": "workbench.action.showEditorsInActiveGroup"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.gotoLine"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.gotoLine"
  },
  {
    "key": "alt+1",
    "command": "editor.action.marker.next",
    "when": "editorFocus && !textCompareEditorVisible"
  },
  {
    "key": "alt+2",
    "command": "editor.action.marker.prev",
    "when": "editorFocus && !textCompareEditorVisible"
  },
  {
    "key": "alt+1",
    "command": "workbench.action.compareEditor.nextChange",
    "when": "textCompareEditorVisible"
  },
  {
    "key": "alt+2",
    "command": "workbench.action.compareEditor.previousChange",
    "when": "textCompareEditorVisible"
  },
  {
    "key": "alt+shift+1",
    "command": "editor.action.diffReview.next",
    "when": "isInDiffEditor"
  },
  {
    "key": "alt+shift+2",
    "command": "editor.action.diffReview.prev",
    "when": "isInDiffEditor"
  },
  {
    "key": "alt+3",
    "command": "search.action.focusNextSearchResult"
  },
  {
    "key": "alt+4",
    "command": "search.action.focusPreviousSearchResult"
  },
  {
    "key": "ctrl+c ctrl+c",
    "command": "editor.action.commentLine",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+h ctrl+w",
    "command": "editor.action.toggleWordWrap",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+x o",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "terminalFocus"
    // "command": "workbench.action.showEditorsInActiveGroup"
  },

  /**
   * Macros
   **/
  {
    "key": "ctrl+h ctrl+c",
    "command": "workbench.action.tasks.runTask",
    "args": "Lint_sh"
  },
  {
    "key": "ctrl+h ctrl+f",
    "command": "workbench.action.tasks.runTask",
    "args": "Fix_sh"
  },

  // focus the terminal and rerun the last command in the history
  // use the multicommand extension (ryuta46.multi-command)
  {
    "key": "ctrl+h ctrl+p",
    "command": "extension.multiCommand.execute",
    "args": {
      "sequence": [
        "saveAll",
        "workbench.action.terminal.focus",
        // line home
        {
          "command": "workbench.action.terminal.sendSequence",
          "args": {
            "text": "\u001b[H"
          }
        },
        // clear to end of line
        {
          "command": "workbench.action.terminal.sendSequence",
          "args": {
            "text": "\u001b[K"
          }
        },
        // up (previous history)
        {
          "command": "workbench.action.terminal.sendSequence",
          "args": {
            "text": "\u001b[A"
          }
        },
        // execute
        {
          "command": "workbench.action.terminal.sendSequence",
          "args": {
            "text": "\n"
          }
        },
      ]
    }
  },


  /**
   * Better search
   **/
  {
    "key": "ctrl+s",
    // "command": "fuzzySearch.activeTextEditorWithCurrentSelection",
    "command": "ham.swiper-word-at-cursor",
    // "command": "actions.findWithSelection"
  },
  {
    "key": "ctrl+h ctrl+s",
    // "command": "fuzzySearch.activeTextEditorWithCurrentSelection",
    // "command": "ham.swiper-word-at-cursor",
    "command": "actions.findWithSelection"
  },

  /**
   * ham-keys (alt+ctrl), for use with a hardware keyboard layer toggle.
   **/

  // Commands
  { "key": "alt+ctrl+g", "command": "emacs-mcx.cancel" },

  // Movement.
  { "key": "alt+ctrl+i", "command": "emacs-mcx.previousLine", "when": "editorTextFocus" },
  { "key": "alt+ctrl+j", "command": "emacs-mcx.backwardChar", "when": "editorTextFocus" },
  { "key": "alt+ctrl+k", "command": "emacs-mcx.nextLine", "when": "editorTextFocus" },
  { "key": "alt+ctrl+l", "command": "emacs-mcx.forwardChar", "when": "editorTextFocus" },

  { "key": "alt+ctrl+u", "command": "emacs-mcx.backwardWord", "when": "editorTextFocus" },
  { "key": "alt+ctrl+o", "command": "emacs-mcx.forwardWord", "when": "editorTextFocus" },

  { "key": "alt+ctrl+y", "command": "emacs-mcx.backwardParagraph", "when": "editorTextFocus" },
  { "key": "alt+ctrl+h", "command": "emacs-mcx.forwardParagraph", "when": "editorTextFocus" },

  { "key": "alt+ctrl+6", "command": "emacs-mcx.moveBeginningOfLine" },
  { "key": "alt+ctrl+7", "command": "emacs-mcx.backToIndentation" },
  { "key": "alt+ctrl+8", "command": "emacs-mcx.moveEndOfLine" },

  // Search and navigation
  { "key": "alt+ctrl+n", "command": "ham.swiper-word-at-cursor" },

  // Multi cursors
  { "key": "alt+ctrl+shift+m", "command": "emacs-mcx.addSelectionToPreviousFindMatch", "when": "editorHasSelection" },
  { "key": "alt+ctrl+shift+m", "command": "editor.action.insertCursorAbove", "when": "!editorHasSelection" },
  { "key": "alt+ctrl+m", "command": "emacs-mcx.addSelectionToNextFindMatch", "when": "editorHasSelection" },
  { "key": "alt+ctrl+m", "command": "editor.action.insertCursorBelow", "when": "!editorHasSelection" },

  // Editing
  { "key": "alt+ctrl+q", "command": "editor.action.formatSelection" },
  { "key": "alt+ctrl+, alt+ctrl+q", "command": "rewrap.rewrapComment" },
  { "key": "alt+ctrl+w", "command": "deleteWordRight" },
  { "key": "alt+ctrl+e", "command": "deleteWordLeft" },

  { "key": "alt+ctrl+a", "command": "expandLineSelection", "when": "editorHasSelection" },
  {
    "command": "runCommands",
    "when": "!editorHasSelection",
    "key": "alt+ctrl+a",
    "args": {
      "commands": [
        "emacs-mcx.setMarkCommand",
        "expandLineSelection",
      ]
    }
  },
  {
    "command": "runCommands",
    "when": "!editorHasSelection",
    "key": "alt+ctrl+s",
    "args": {
      "commands": [
        "emacs-mcx.moveEndOfLine",
        "emacs-mcx.newLine"
      ],
    },
  },
  {
    "command": "runCommands",
    "when": "!editorHasSelection",
    "key": "alt+ctrl+shift+s",
    "args": {
      "commands": [
        "emacs-mcx.previousLine",
        "emacs-mcx.moveEndOfLine",
        "emacs-mcx.newLine"
      ],
    },
  },
  { "key": "alt+ctrl+d", "command": "deleteRight" },

  { "key": "alt+ctrl+z", "command": "undo" },
  { "key": "alt+ctrl+, alt+ctrl+z", "command": "redo" },
  { "key": "alt+ctrl+x", "command": "emacs-mcx.killRegion", "when": "editorHasSelection" },
  { "key": "alt+ctrl+x", "command": "emacs-mcx.deleteForwardChar", "when": "!editorHasSelection" },
  { "key": "alt+ctrl+c", "command": "emacs-mcx.copyRegion" },
  { "key": "alt+ctrl+v", "command": "emacs-mcx.yank" },
  { "key": "alt+ctrl+b", "command": "emacs-mcx.yank-pop" },

  // Visual selection
  { "key": "alt+ctrl+t", "command": "emacs-mcx.setMarkCommand" },
  {
    "command": "runCommands",
    "when": "editorHasSelection",
    "key": "alt+ctrl+r",
    "args": {
      "commands": [
        "editor.action.smartSelect.expand",
      ]
    }
  },
  {
    "command": "runCommands",
    "when": "!editorHasSelection",
    "key": "alt+ctrl+r",
    "args": {
      "commands": [
        "emacs-mcx.setMarkCommand",
        "editor.action.smartSelect.expand",
      ]
    }
  },
  {
    "command": "runCommands",
    "when": "editorHasSelection",
    "key": "alt+ctrl+shift+r",
    "args": {
      "commands": [
        "editor.action.smartSelect.shrink",
      ]
    }
  },

  // Splits
  { "key": "alt+ctrl+1", "command": "workbench.action.focusNextGroup" },
  { "key": "alt+ctrl+2", "command": "workbench.action.splitEditorDown" },
  { "key": "alt+ctrl+3", "command": "workbench.action.splitEditorRight" },
  { "key": "alt+ctrl+4", "command": "workbench.action.closeEditorsInGroup" },

  // Auto-complete
  { "key": "ctrl+/", "command": "editor.action.triggerSuggest" },

  // Leader goto locations
  { "key": "alt+ctrl+/ alt+ctrl+y", "command": "emacs-mcx.beginningOfBuffer" },
  { "key": "alt+ctrl+/ alt+ctrl+h", "command": "emacs-mcx.endOfBuffer" },
  { "key": "alt+ctrl+/ alt+ctrl+l", "command": "workbench.action.gotoLine" },
  { "key": "alt+ctrl+/ alt+ctrl+/", "command": "editor.action.jumpToBracket" },
  { "key": "alt+ctrl+/ alt+ctrl+g", "command": "workbench.action.gotoSymbol" },
  { "key": "alt+ctrl+/ alt+ctrl+,", "command": "workbench.action.navigateBack" },
  { "key": "alt+ctrl+/ alt+ctrl+.", "command": "workbench.action.navigateForward" },
  { "key": "alt+ctrl+/ alt+ctrl+p", "command": "editor.action.previousSelectionMatchFindAction" },
  { "key": "alt+ctrl+/ alt+ctrl+n", "command": "editor.action.nextSelectionMatchFindAction" },

  // Leader commands
  { "key": "alt+ctrl+, alt+ctrl+,", "command": "workbench.action.showCommands" },

  { "key": "alt+ctrl+, alt+ctrl+r", "command": "editor.action.smartSelect.shrink" },

  { "key": "alt+ctrl+, alt+ctrl+o", "command": "workbench.action.quickOpen" },
  { "key": "alt+ctrl+, alt+ctrl+i", "command": "breadcrumbs.focusAndSelect" },
  { "key": "alt+ctrl+, alt+ctrl+b", "command": "workbench.action.quickOpen" },
  { "key": "alt+ctrl+, alt+ctrl+d", "command": "revealInExplorer" },

  { "key": "alt+ctrl+, alt+ctrl+e", "command": "editor.action.joinLines" },

  {
    "key": "alt+ctrl+, alt+ctrl+j",
    "command": "workbench.action.findInFiles"
  },
  {
    "key": "alt+ctrl+, alt+ctrl+h",
    "command": "extension.multiCommand.execute",
    "args": {
      // Set an interval such that togglePreserveCase is executed when the
      // search/replace dialog is open.
      "interval": 200,
      "sequence": [
        "emacs-mcx.queryReplaceRegexp",
        "togglePreserveCase"
      ]
    }
  },

  { "key": "alt+ctrl+, alt+ctrl+s", "command": "workbench.action.files.save" },
  { "key": "alt+ctrl+, alt+ctrl+w", "command": "saveAll" },
  { "key": "alt+ctrl+, alt+ctrl+k", "command": "workbench.action.closeActiveEditor" },
  { "key": "alt+ctrl+, alt+ctrl+t", "command": "workbench.action.files.revert" },

  { "key": "alt+ctrl+, alt+ctrl+1", "command": "workbench.action.toggleZenMode" },

  { "key": "alt+ctrl+, alt+ctrl+a", "command": "editor.action.selectAll" },

  { "key": "alt+ctrl+, alt+ctrl+m", "command": "editor.action.selectHighlights" },
  { "key": "alt+ctrl+, alt+ctrl+8", "command": "editor.action.insertCursorAtEndOfEachLineSelected" },

  // focus the terminal and rerun the last command in the history
  // use the multicommand extension (ryuta46.multi-command)
  {
    "key": "alt+ctrl+, alt+ctrl+p",
    "command": "extension.multiCommand.execute",
    "args": {
      "sequence": [
        "saveAll",
        "workbench.action.terminal.focus",
        // line home
        {
          "command": "workbench.action.terminal.sendSequence",
          "args": {
            "text": "\u001b[H"
          }
        },
        // clear to end of line
        {
          "command": "workbench.action.terminal.sendSequence",
          "args": {
            "text": "\u001b[K"
          }
        },
        // up (previous history)
        {
          "command": "workbench.action.terminal.sendSequence",
          "args": {
            "text": "\u001b[A"
          }
        },
        // execute
        {
          "command": "workbench.action.terminal.sendSequence",
          "args": {
            "text": "\n"
          }
        },
      ]
    }
  },

  // Comment/uncomment
  {
    "key": "alt+ctrl+, alt+ctrl+c",
    "command": "editor.action.addCommentLine",
    "when": "editorHasSelection"
  },
  {
    "command": "runCommands",
    "when": "!editorHasSelection",
    "key": "alt+ctrl+, alt+ctrl+c",
    "args": {
      "commands": [
        "editor.action.addCommentLine",
        "cursorDown"
      ],
    },
  },
  {
    "key": "alt+ctrl+, alt+ctrl+v",
    "command": "editor.action.removeCommentLine",
    "when": "editorHasSelection"
  },
  {
    "command": "runCommands",
    "key": "alt+ctrl+, alt+ctrl+v",
    "args": {
      "commands": [
        "editor.action.removeCommentLine",
        "cursorUp"
      ]
    }
  },

  // Next/prev match nav
  { "key": "f1",
    "command": "editor.action.marker.prev",
    "when": "editorFocus && !textCompareEditorVisible"
  },
  { "key": "f1",
    "command": "workbench.action.compareEditor.previousChange",
    "when": "textCompareEditorVisible"
  },
  { "key": "f1",
    "command": "editor.action.diffReview.prev",
    "when": "isInDiffEditor"
  },
  { "key": "f2",
    "command": "editor.action.marker.next",
    "when": "editorFocus && !textCompareEditorVisible"
  },
  { "key": "f2",
    "command": "workbench.action.compareEditor.nextChange",
    "when": "textCompareEditorVisible"
  },
  { "key": "f2",
    "command": "editor.action.diffReview.next",
    "when": "isInDiffEditor"
  },
  { "key": "f3",
    "command": "search.action.focusPreviousSearchResult"
  },
  { "key": "f4",
    "command": "search.action.focusNextSearchResult"
  },
]
