[
  /**
   * ham-keys
   **/
  // Commands
  { "key": "alt+p", "command": "workbench.action.showCommands" },

  // Movement. Built on top of basic arrow movements.
  // arrows: move by characters
  // alt+arrows: move by words left/right and by paragraph up/down
  { "key": "alt+y", "command": "emacs-mcx.backwardWord", "when": "editorTextFocus" },
  { "key": "cmd+y", "command": "emacs-mcx.backwardWord", "when": "editorTextFocus" }, // macOS fallback
  { "key": "alt+o", "command": "emacs-mcx.forwardWord", "when": "editorTextFocus" },
  { "key": "cmd+o", "command": "emacs-mcx.forwardWord", "when": "editorTextFocus" }, // macOS fallback
  { "key": "alt+u", "command": "emacs-mcx.forwardParagraph", "when": "editorTextFocus" },
  { "key": "cmd+u", "command": "emacs-mcx.forwardParagraph", "when": "editorTextFocus" }, // macOS fallback
  { "key": "alt+i", "command": "emacs-mcx.backwardParagraph", "when": "editorTextFocus" },
  { "key": "cmd+i", "command": "emacs-mcx.backwardParagraph", "when": "editorTextFocus" }, // macOS fallback

  { "key": "alt+l", "command": "emacs-mcx.forwardChar", "when": "editorTextFocus" },
  { "key": "cmd+l", "command": "emacs-mcx.forwardChar", "when": "editorTextFocus" }, // macOS fallback
  { "key": "alt+h", "command": "emacs-mcx.backwardChar", "when": "editorTextFocus" },
  { "key": "cmd+h", "command": "emacs-mcx.backwardChar", "when": "editorTextFocus" }, // macOS fallback
  { "key": "alt+j", "command": "emacs-mcx.nextLine", "when": "editorTextFocus" },
  { "key": "cmd+j", "command": "emacs-mcx.nextLine", "when": "editorTextFocus" }, // macOS fallback
  { "key": "alt+k", "command": "emacs-mcx.previousLine", "when": "editorTextFocus" },
  { "key": "cmd+k", "command": "emacs-mcx.previousLine", "when": "editorTextFocus" }, // macOS fallback

  { "key": "alt+e", "command": "emacs-mcx.moveEndOfLine" },
  { "key": "cmd+e", "command": "emacs-mcx.moveEndOfLine" }, // macOS fallback
  { "key": "alt+shift+e", "command": "emacs-mcx.exchangePointAndMark" },
  { "key": "cmd+shift+e", "command": "emacs-mcx.exchangePointAndMark" }, // macOS fallback
  { "key": "alt+a", "command": "emacs-mcx.moveBeginningOfLine" },
  { "key": "cmd+a", "command": "emacs-mcx.moveBeginningOfLine" }, // macOS fallback
  { "key": "alt+shift+a", "command": "emacs-mcx.backToIndentation" },
  { "key": "cmd+shift+a", "command": "emacs-mcx.backToIndentation" }, // macOS fallback

  { "key": "alt+shift+.", "command": "workbench.action.navigateForward" },
  { "key": "alt+.", "command": "workbench.action.navigateBack" },

  // Goto locations
  { "key": "alt+g a", "command": "emacs-mcx.beginningOfBuffer" },
  { "key": "alt+g e", "command": "emacs-mcx.endOfBuffer" },
  { "key": "alt+g l", "command": "workbench.action.gotoLine" },
  { "key": "alt+g g", "command": "editor.action.jumpToBracket" },
  { "key": "alt+g alt+g", "command": "editor.action.jumpToBracket" },
  { "key": "alt+g .", "command": "workbench.action.gotoSymbol" },

  // Multi cursors
  { "key": "alt+shift+d", "command": "emacs-mcx.addSelectionToPreviousFindMatch", "when": "editorHasSelection" },
  { "key": "alt+shift+d", "command": "editor.action.insertCursorAbove", "when": "!editorHasSelection" },
  { "key": "alt+d", "command": "emacs-mcx.addSelectionToNextFindMatch", "when": "editorHasSelection" },
  { "key": "alt+d", "command": "editor.action.insertCursorBelow", "when": "!editorHasSelection" },

  // Editing
  { "key": "alt+z", "command": "undo" },
  { "key": "alt+shift+z", "command": "redo" },
  { "key": "alt+x", "command": "emacs-mcx.killRegion", "when": "editorHasSelection" },
  { "key": "alt+x", "command": "emacs-mcx.deleteForwardChar", "when": "!editorHasSelection" },
  { "key": "alt+shift+x", "command": "emacs-mcx.killRegion", "when": "editorHasSelection" },
  { "key": "alt+shift+x", "command": "emacs-mcx.killWord", "when": "!editorHasSelection" },
  { "key": "alt+c", "command": "emacs-mcx.copyRegion" },
  { "key": "alt+v", "command": "emacs-mcx.yank" },
  { "key": "alt+shift+v", "command": "emacs-mcx.yank-pop" },

  // Editing, macOS fallbacks
  { "key": "cmd+z", "command": "undo" },
  { "key": "cmd+shift+z", "command": "redo" },
  { "key": "cmd+x", "command": "emacs-mcx.killRegion", "when": "editorHasSelection" },
  { "key": "cmd+x", "command": "emacs-mcx.deleteForwardChar", "when": "!editorHasSelection" },
  { "key": "cmd+shift+x", "command": "emacs-mcx.killRegion", "when": "editorHasSelection" },
  { "key": "cmd+shift+x", "command": "emacs-mcx.killWord", "when": "!editorHasSelection" },
  { "key": "cmd+c", "command": "emacs-mcx.copyRegion" },
  { "key": "cmd+v", "command": "emacs-mcx.yank" },
  { "key": "cmd+shift+v", "command": "emacs-mcx.yank-pop" },

  // New lines
  {
    "command": "runCommands",
    "when": "!editorHasSelection",
    "key": "alt+b",
    "args": {
      "commands": [
        "emacs-mcx.moveEndOfLine",
        "emacs-mcx.newLine"
      ],
    },
  },
  {
    "command": "runCommands",
    "when": "!editorHasSelection",
    "key": "alt+shift+b",
    "args": {
      "commands": [
        "emacs-mcx.previousLine",
        "emacs-mcx.moveEndOfLine",
        "emacs-mcx.newLine"
      ],
    },
  },

  // cmd+q will quite your apps... oops & cmd+shift+q shutdown your machine xD
  { "key": "alt+q", "command": "editor.action.formatSelection" },
  { "key": "alt+shift+q", "command": "rewrap.rewrapComment" },
  { "key": "alt+;", "command": "editor.action.addCommentLine", "when": "editorHasSelection" },
  {
    "command": "runCommands",
    "when": "!editorHasSelection",
    "key": "alt+;",
    "args": {
      "commands": [
        "editor.action.addCommentLine",
        "cursorDown"
      ],
    },
  },
  { "key": "alt+shift+;", "command": "editor.action.removeCommentLine", "when": "editorHasSelection" },
  {
    "command": "runCommands",
    "key": "alt+shift+;",
    "args": {
      "commands": [
        "editor.action.removeCommentLine",
        "cursorUp"
      ]
    }
  },

  // Visual selection
  { "key": "alt+m", "command": "emacs-mcx.setMarkCommand" },
  {
    "command": "runCommands",
    "when": "editorHasSelection",
    "key": "alt+w",
    "args": {
      "commands": [
        "editor.action.smartSelect.expand",
      ]
    }
  },
  {
    "command": "runCommands",
    "when": "!editorHasSelection",
    "key": "alt+w",
    "args": {
      "commands": [
        "emacs-mcx.setMarkCommand",
        "editor.action.smartSelect.expand",
      ]
    }
  },
  {
    "command": "runCommands",
    "when": "editorHasSelection",
    "key": "alt+shift+w",
    "args": {
      "commands": [
        "expandLineSelection",
      ]
    }
  },
  {
    "command": "runCommands",
    "when": "!editorHasSelection",
    "key": "alt+shift+w",
    "args": {
      "commands": [
        "emacs-mcx.setMarkCommand",
        "expandLineSelection",
      ]
    }
  },

  // Search and navigation
  { "key": "alt+s", "command": "ham.swiper-word-at-cursor" },
  { "key": "alt+shift+8", "command": "actions.findWithSelection" }, // alt+*

  // Auto-complete
  { "key": "alt+/", "command": "editor.action.triggerSuggest" },

  // Leader keys
  { "key": "alt+, p", "command": "workbench.action.showCommands" },
  { "key": "alt+, r", "command": "workbench.action.files.revert" },

  { "key": "alt+, f", "command": "workbench.action.quickOpen" },
  { "key": "alt+, o", "command": "workbench.action.quickOpen" },
  { "key": "alt+, d", "command": "revealInExplorer" },

  {
    "key": "alt+, j",
    "command": "workbench.action.findInFiles"
  },
  {
    "key": "alt+, h",
    "command": "extension.multiCommand.execute",
    "args": {
      // Set an interval such that togglePreserveCase is executed when the
      // search/replace dialog is open.
      "interval": 200,
      "sequence": [
        "emacs-mcx.queryReplaceRegexp",
        "togglePreserveCase"
      ]
    }
  },

  { "key": "alt+, s", "command": "workbench.action.files.save" },
  { "key": "alt+, S", "command": "saveAll" },
  { "key": "alt+, k", "command": "workbench.action.closeActiveEditor" },

  { "key": "alt+, 1", "command": "workbench.action.toggleZenMode" },
  { "key": "alt+, 2", "command": "workbench.action.splitEditorDown" },
  { "key": "alt+, 3", "command": "workbench.action.splitEditorRight" },
  { "key": "alt+, 0", "command": "workbench.action.closeEditorsInGroup" },
]
