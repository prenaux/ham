#
# _build.ham to build Ham (a make(1)-like program)
#
# There are no user-serviceable parts in this file.
#
# Put executables in platform-specific  subdirectory.

include _rules.ham ;

ECHO "OS:" $(OS) ;
ECHO "OSPLAT:" $(OSPLAT) ;

CHECK_BASH_RULE = [ Subst [ Bash "ls _build.ham" ] : "%s" ]  ;
ECHO "BashRule:" $(CHECK_BASH_RULE) ;
if $(CHECK_BASH_RULE) != "_build.ham" {
  EXIT "E/Bash builtin rule is broken on this platform." ;
}

# note that we use the target directory 'bin.unix' to ensure that
# 'make install' and 'make uninstall' work correctly
#
LOCATE_TARGET ?= bin/$(HAM_BIN_LOA) ;

# Leave generated source in current directory; it would be nice to use
# these lines below to build the source into the platform-specific
# directory, but getting scan.c to include the right jambase.h is
# hard: with ""'s, it always gets the bootstrap version; with <>'s,
# it won't find the bootstrap version.

# SEARCH_SOURCE ?= $(LOCATE_TARGET) $(DOT) ;
# LOCATE_SOURCE ?= $(LOCATE_TARGET) ;

#
# We have some different files for UNIX and NT.
#

#
# For some really stupid reason, classic Ham doesn't define NT
# when compiling with Mingw, but the variable MINGW instead..
#

if ! $(NT) && $(MINGW)
{
  NT = 1 ;
  HAM_TOOLSET = MINGW ;
}

if $(NT) 	{
  code = execunix.c filent.c pathunix.c ;
}
else if $(OS2)
{
  # special case for OS/2: when compiling with GCC/EMX, we use
  # "fileunix.c" instead of "fileos2.c"
  code = execunix.c pathunix.c ;
  if $(HAM_TOOLSET) = EMX
  {
    CCFLAGS += -D__OS2__ ;
    code += fileunix.c ;
  }
  else
  {
    code += fileos2.c ;
  }
}
else {
  code = execunix.c fileunix.c pathunix.c ;
}

if $(UNIX) && $(OS) = CYGWIN {
  CCFLAGS += -D__cygwin__ ;
}

if $(OS) = MACOSX {
  CCFLAGS += -Wno-parentheses -Wno-string-plus-int ;
}

# For ham profiling/debugging.

if $(PROFILE)
{
	CCFLAGS += -pg ;
	LINKFLAGS += -pg ;
	LOCATE_TARGET = $(LOCATE_TARGET)/pg ;
}

if $(DEBUG)
{
  if $(OS) = NT {
    # Always have debug infos
  }
  else {
    CCFLAGS += -g ;
    LINKFLAGS += -g ;
    LOCATE_TARGET = $(LOCATE_TARGET)/g ;
  }
}

# We have to signal jam.h for these

if $(OS) = NT
{
  switch $(HAM_TOOLSET)
  {
    case MINGW       : CCFLAGS += -DNT ;
    case LCC         : CCFLAGS += -DNT ;
    case DIGITALMARS : CCFLAGS += -DNT ;
    case *           : CCFLAGS += -DNT -O2 -GL ;
    # case *           : CCFLAGS += -RTC1 -DNT -Od -Zi ; # This is VC++ make sure to use optimization and debug symbols
  }
}

# Do we know yacc?
if $(YACC) 	{ code += jamgram.y ; }
else        { code += jamgram.c ; }

#
# Build the jamgram.y from the jamgram.yy
# yyacc is a slippery script that makes grammars a little
# easier to read/maintain.
#

if $(YACC) && $(SUFEXE) = ""
{
	GenFile jamgram.y jamgramtab.h : ./yyacc jamgram.yy ;
}

#
# How to build the compiled in jambase.
#

Main		mkjambase : mkjambase.c ;

#
# The guts of the Hamfile: how to build Jam
#

Main            ham : jam.c jambase.c ;
LinkLibraries 	ham : libjam.a ;
GenFile 	    jambase.c : mkjambase Jambase ;

if $(UNIX)
{
  actions Strip
  {
    strip $(1)
  }

  Strip ham ;
}

Library libjam.a :
    buffer.c builtins.c command.c compile.c $(code) expand.c
    glob.c hash.c headers.c lists.c luagsub.c make.c make1.c
    newstr.c option.c parse.c regexp.c rules.c scan.c
    search.c sha256.c timestamp.c variable.c hcache.c
    hdrmacro.c
;

# Strip the Ham executable on Mingw
#
if $(HAM_TOOLSET) = MINGW
{
  actions  Strip
  {
    strip $(1)
  }

  Strip  ham$(SUFEXE) ;
}

#
# Distribution making from here on out.
#
ALLSOURCE =
	Build.com Build.mpw Jam.html Jambase Jambase.html _build.ham
	Jamfile.html Porting README RELNOTES builtins.c builtins.h
	command.c command.h compile.c compile.h execcmd.h
	execunix.c expand.c expand.h filemac.c filent.c
	fileos2.c filesys.h fileunix.c glob.c hash.c hash.h
	hdrmacro.c hdrmacro.h headers.c headers.h jam.c jam.h jambase.c
	jambase.h jamgram.c jamgram.h jamgram.y jamgram.yy jamgramtab.h
	lists.c lists.h make.c make.h make1.c mkjambase.c newstr.c newstr.h
	option.c option.h parse.c parse.h patchlevel.h pathmac.c pathsys.h
	pathunix.c regexp.c regexp.h rules.c rules.h scan.c
	scan.h search.c search.h sha256.c timestamp.c timestamp.h variable.c
  hcache.c hcache.h
	variable.h yyacc
	hdrmacro.c
	INSTALL
	README.ORG
	CHANGES
	common.mk
	[ GLOB builds : *.mk ]
	[ GLOB builds/unix : *.in ]
	builds/unix/configure
	builds/unix/configure.ac
	builds/unix/config.sub
	builds/unix/config.guess
	builds/unix/install-sh
	builds/unix/mkinstalldirs
	configure
	;
