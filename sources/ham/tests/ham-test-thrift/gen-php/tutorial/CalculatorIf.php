<?php
namespace tutorial;

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * Ahh, now onto the cool part, defining a service. Services just need a name
 * and can optionally inherit from another service using the extends keyword.
 */
interface CalculatorIf extends \shared\SharedServiceIf
{
    /**
     * A method definition looks like C code. It has a return type, arguments,
     * and optionally a list of exceptions that it may throw. Note that argument
     * lists and exception lists are specified using the exact same syntax as
     * field lists in struct or exception definitions.
     * 
     */
    public function ping();
    /**
     * @param int $num1
     * @param int $num2
     * @return int
     */
    public function add($num1, $num2);
    /**
     * @param int $logid
     * @param \tutorial\Work $w
     * @return int
     * @throws \tutorial\InvalidOperation
     */
    public function calculate($logid, \tutorial\Work $w);
    /**
     * This method has a oneway modifier. That means the client only makes
     * a request and does not listen for any response at all. Oneway methods
     * must be void.
     * 
     */
    public function zip();
}
