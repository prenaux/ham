#!/bin/bash -e
#===== PRELUDE BEGIN ===========
if [[ -z "$HAM_HOME" ]]; then echo "E/HAM_HOME not set !"; exit 1; fi
# shellcheck disable=SC2034
SCRIPT_NAME=$(basename "$0")
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
. "$HAM_HOME/bin/ham-bash-setenv.sh"
#===== PRELUDE TOOLSETS ========
export HAM_NO_VER_CHECK=1
toolset_import_once repos > /dev/null
#===== PRELUDE END =============

usage() {
  echo "usage: $(basename "$0") [short|long|os|hostname|cpu|memory|disk]"
  echo ""
  echo "options:"
  echo "  short     Print short version of host information"
  echo "  long      Print long version of host information (default)"
  echo "  loa       Print only the host/build linker/os/arch information"
  echo "  os        Print only the operating system information"
  echo "  hostname  Print only the hostname"
  echo "  cpu       Print only the CPU information"
  echo "  memory    Print only the memory information"
  echo "  disk      Print only the disk information"
  echo ""
  echo "This script provides information about the current build host."
  exit 1
}

ham_info=$("$HAM_HOME/bin/ham" -v 2>&1)
export ham_info

ham_host_sanitize() {
  echo "$1" | tr '[:upper:]' '[:lower:]' | tr -c '[:alnum:]' '_' | sed 's/_\+/_/g;s/^_//;s/_$//'
}

ham_host_get_hostname() {
  local hostname
  hostname=$(hostname -s 2>/dev/null || hostname)
  ham_host_sanitize "$hostname"
}

# Parse key=value pairs from ham output
get_ham_value() {
  local ham_info=$1
  local key=$2
  echo "$ham_info" | grep -o "$key=[^,]*" | cut -d= -f2
}

ham_host_get_loa() {
  if [ -n "$BUILD_BIN_LOA" ]; then
    echo "$BUILD_BIN_LOA"
  elif [ -n "$HAM_BIN_LOA" ]; then
    echo "$HAM_BIN_LOA"
  else
    echo "no-loa"
  fi
}

ham_host_get_os() {
  echo "$HAM_OS" | tr '[:upper:]' '[:lower:]'
}

ham_host_get_cpu() {
  local cpu=$(get_ham_value "$ham_info" "CPU")
  echo "$cpu"
}

ham_host_get_memory() {
  local mem=$(get_ham_value "$ham_info" "MEM" | tr -d 'KB')
  # Convert KB to GB
  echo $((mem / 1024))
}

ham_host_get_memory_kb() {
  local mem=$(get_ham_value "$ham_info" "MEM" | tr -d 'KB')
  echo "$mem"
}

ham_host_get_disk() {
  local diskfree=$(get_ham_value "$ham_info" "DISKFREE" | tr -d 'GB')
  local disksz=$(get_ham_value "$ham_info" "DISKSZ" | tr -d 'GB.')
  echo "${disksz}|${diskfree}"
}

ham_host_short() {
  local cpu=$(ham_host_get_cpu)
  local mem=$(ham_host_get_memory)
  local disk_info=$(ham_host_get_disk)
  local diskfree=$(echo "$disk_info" | coreutils cut -d'|' -f2)
  local disksize=$(echo "$disk_info" | coreutils cut -d'|' -f1)
  echo "$(ham_host_get_hostname)-$(ham_host_get_loa)-${cpu}c-${mem}ram-${diskfree}fr-${disksize}sz"
}

ham_host_long() {
  local cpu=$(ham_host_get_cpu)
  local mem=$(ham_host_get_memory_kb)
  local disk_info=$(ham_host_get_disk)
  local diskfree=$(echo "$disk_info" | coreutils cut -d'|' -f2)
  local disksize=$(echo "$disk_info" | coreutils cut -d'|' -f1)
  echo "host: $(ham_host_get_hostname), loa: $(ham_host_get_loa), os: $(ham_host_get_os), cpu: $cpu, ram: ${mem}KB, diskfree: ${diskfree}GB, disksz: ${disksize}GB"
}

case "$1" in
  "short")
    ham_host_short
    ;;
  "long"|"")
    ham_host_long
    ;;
  "loa")
    ham_host_get_loa
    ;;
  "os")
    ham_host_get_os
    ;;
  "hostname")
    ham_host_get_hostname
    ;;
  "cpu")
    ham_host_get_cpu
    ;;
  "memory")
    echo "$(ham_host_get_memory)KB"
    ;;
  "disk")
    disk_info=$(ham_host_get_disk)
    echo "Disk Total: $(echo $disk_info | cut -d'|' -f1)GB, Disk Free: $(echo $disk_info | cut -d'|' -f2)GB"
    ;;
  *)
    usage
    ;;
esac
