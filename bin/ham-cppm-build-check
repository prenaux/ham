#!/bin/bash -e
if [[ -z "$HAM_HOME" ]]; then echo "E/HAM_HOME not set !"; exit 1; fi
. "$HAM_HOME/bin/ham-bash-setenv.sh"

usage() {
    echo "usage:"
    echo "  ${0##*/} TOOLSET HDR(path.h|noheader) libname|nolib dllname|nodll (exe_path0 ... exe_pathN)"
    echo ""
    echo "example:"
    echo "  ham-cppm-build-check thrift_cppm noheader thrift_cppm thrift_cppm ham_thriftc"
    echo ""
    echo "note:"
    echo "  Setting HAM_CPPM_FORCE_BUILD to 1 will skip the checks and will always try to build."
    echo ""
    exit 1
}

# Build settings
BUILD=${BUILD:-ra}
BIN_LOA=$(toolset_get_target_bin_loa)
# echo "I/BUILD: $BUILD"
# echo "I/BIN_LOA: $BIN_LOA"

# Parameters check
TOOLSET=$1
if [ -z "$TOOLSET" ]; then
  echo "E/No TOOLSET specified"
  usage
elif [ ! -d "$HAM_HOME/specs/toolsets/$TOOLSET" ]; then
  echo "E/TOOLSET doesn't exist: '$HAM_HOME/specs/toolsets/$TOOLSET'."
  usage
fi
shift

HDR_CHECK_PATH=$1
if [ -z "$HDR_CHECK_PATH" ]; then
  echo "E/No HDR_CHECK_PATH specified"
  usage
fi
shift
# echo "I/HDR_CHECK_PATH: $HDR_CHECK_PATH"

LIB_CHECK_PATH=$1
if [ -z "$LIB_CHECK_PATH" ]; then
  echo "E/No LIB_CHECK_PATH specified"
  usage
elif [ "$1" == "nolib" ]; then
  LIB_CHECK_PATH=nolib
else
  LIB_CHECK_PATH="${HAM_HOME}/libs/`ham-cppm-bin-filepath lib ${LIB_CHECK_PATH}_${BUILD}`"
fi
shift
# echo "I/LIB_CHECK_PATH: $LIB_CHECK_PATH"

DLL_CHECK_PATH=$1
if [ -z "$DLL_CHECK_PATH" ]; then
  echo "E/No DLL_CHECK_PATH specified"
  usage
elif [ "$1" == "nodll" ]; then
  DLL_CHECK_PATH=nodll
else
  DLL_CHECK_PATH="${HAM_HOME}/bin/`ham-cppm-bin-filepath dll ${DLL_CHECK_PATH}_${BUILD}`"
fi
shift
# echo "I/DLL_CHECK_PATH: $DLL_CHECK_PATH"

# Platform specific skips
# echo "... BIN_LOA: $BIN_LOA"
case $BIN_LOA in
  # No DLL_CHECK_PATH targets
  web-js)
    DLL_CHECK_PATH=nodll
    ;;
esac

EXE_FILES=()
if [ "$HAM_CPPM_FORCE_BUILD" == "1" ] ||
     [ "$(check_file $HDR_CHECK_PATH noheader)" == "notfound" ] ||
     [ "$(check_file $LIB_CHECK_PATH nolib)" == "notfound" ] ||
     [ "$(check_file $DLL_CHECK_PATH nodll)" == "notfound" ]; then
  SHOULD_BUILD=1
else
  SHOULD_BUILD=0
fi

if [ "$SHOULD_BUILD" == "0" ]; then
  while [ "$#" -gt 0 ]; do
    EXE_PATH=$(ham-cppm-exe-path $TOOLSET $1)
    # echo "I/EXE_PATH: $EXE_PATH"
    EXE_FILES+=("$EXE_PATH")
    if [ ! -e "$EXE_PATH" ]; then
      SHOULD_BUILD=1
      break
    fi
    shift
  done
fi
# echo "I/SHOULD_BUILD: $SHOULD_BUILD"

if [ "$SHOULD_BUILD" == "1" ]; then
  (set -x ; HAM_NO_VER_CHECK=1 BUILD=$BUILD ham-cppm-build $TOOLSET)

  FAILED=0
  if [ "$(check_file $HDR_CHECK_PATH noheader)" == "notfound" ]; then
    echo "E/Can't find build artifact header '$HDR_CHECK_PATH'."
    FAILED=1
  fi

  if [ "$(check_file $LIB_CHECK_PATH nolib)" == "notfound" ]; then
    echo "E/Can't find build artifact lib '$LIB_CHECK_PATH'."
    FAILED=1
  fi

  if [ "$(check_file $DLL_CHECK_PATH nodll)" == "notfound" ]; then
    echo "E/Can't find build artifact dll '$DLL_CHECK_PATH'."
    FAILED=1
  fi

  for EXE_FILE in "${EXE_FILES[@]}"; do
    if [ ! -e "$EXE_FILE" ]; then
      echo "E/Can't find build artifact exe '$EXE_FILE'."
      FAILED=1
    fi
  done

  if [ "$FAILED" == 1 ]; then
    echo "E/Not all required artifacts of $TOOLSET could be built."
    exit 1
  fi
fi
