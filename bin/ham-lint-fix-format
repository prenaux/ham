#!/bin/bash -e
#===== PRELUDE BEGIN ===========
export SCRIPT_NAME=$(basename "$0")
export SCRIPT_DIR=$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)
if [[ -z "$HAM_HOME" ]]; then echo "E/HAM_HOME not set !"; exit 1; fi
. "$HAM_HOME/bin/ham-bash-setenv.sh"
#===== PRELUDE TOOLSETS ========
export HAM_NO_VER_CHECK=1
#===== PRELUDE END =============

function sh_lint() {
  toolset_import_once shell_linter > /dev/null
  errcheck $? "$SCRIPT_NAME" "Can't import shell_linter toolset." || return 1

  if [ -z "$1" ]; then
    # List the shell files in a folder
    FILES=$("$HAM_SHELL_LINTER_DIR/shfmt" -f .)
  else
    FILES="$@"
  fi

  if [[ "$LINT_FORMAT" == "yes" ]] || [[ "$LINT_CHECK_FORMAT" == "yes" ]]; then
    local shfmt_params=(-i 2 -ci -bn -ln=bash -bn=false)
    if [[ "$LINT_CHECK_FORMAT" == "yes" ]]; then
      shfmt_params=(-d ${shfmt_params[@]})
    else
      shfmt_params=(-w ${shfmt_params[@]})
    fi
    (set -x ;
     "$HAM_SHELL_LINTER_DIR/shfmt" ${shfmt_params[@]} ${FILES[@]})
  fi

  if [[ "$NO_LINT" != "yes" ]]; then
    local shellcheck_params=(-x --shell=bash --source-path="$HAM_HOME")
    if [[ "$LINT_VERBOSE" != "yes" ]]; then
      shellcheck_params=(--format=gcc ${shellcheck_params[@]})
    fi
    (set -x ;
     "$HAM_SHELL_LINTER_DIR/shellcheck" ${shellcheck_params[@]} ${FILES[@]})
  fi
}

function ni_lint() {
    DIR=`pwd`
    if [ -z "$1" ]; then
        FILES=$(find . -name "*.ni" -o -name "*.nip" -o -name "*.niw")
    else
        FILES="$@"
    fi

    for f in $FILES
    do
        ni -c "$DIR/$f"
    done
}

function ham_flymake_lint() {
    # ham-flymake FLYMAKE=1 CHK_SOURCES=_Test_TiledWidget_aflymake.cpp FLYMAKE_BASEDIR=./ check-syntax
    DIR=$(dirname $1)
    FILENAME=$(basename "$1")
    # We can't just rename the file because VScode won't be able to map the file
    # to the original one. We could add a #line directive in the renamed file
    # but it's not worth it as their's probably edge cases where it won't work
    # and be a pain to track down.
    # FLYMAKE_FILENAME=_${FILENAME%.*}_aflymake.${FILENAME##*.}
    (set -ex;
     cd "$DIR"
     # cp "$FILENAME" "$FLYMAKE_FILENAME"
     touch "$FILENAME"
     ham-flymake FLYMAKE=1 CHK_SOURCES="$FILENAME" FLYMAKE_BASEDIR="./" check-syntax
     # rm "$FLYMAKE_FILENAME"
     )
}

function cpp_lint_dir() {
    DIR=$1
    shift
    echo "I/cpp_lint_dir: '$DIR'"
    (set -e ;
     find "$DIR" \
          \( -name '*.c' \
          -o -name '*.cc' \
          -o -name '*.cpp' \
          -o -name '*.h' \
          -o -name '*.hh' \
          -o -name '*.hpp' \
          -o -name '*.inl' \
          ! -iname '*.idl.inl' \
          \) -print0 |\
         xargs -t -0 -n 10 -P ${HAM_NUM_JOBS:-8} run-for-xargs clang-format $@) || return 1
}

function cpp_lint() {
    if [ "$LINT_FORMAT" == "yes" ] || [ "$LINT_FIX" == "yes" ]; then
        PARAMS=(-i)
    else
        PARAMS=(--dry-run -Werror)
    fi

    if [ -z "$1" ]; then
        DIR=`pwd`
        cpp_lint_dir "$DIR" ${PARAMS[@]}
    else
        (set -x; clang-format ${PARAMS[@]} "$1")
        ham_flymake_lint "$1"
    fi
}

function js_lint() {
    toolset_import_once nodejs > /dev/null
    FIX_OPT=
    if [ "$LINT_FIX" == "yes" ]; then
        FIX_OPT=--fix
    fi

    ESLINT_TARGET="${1:-$LINT_JS_DIR}" # Use $1 or $LINT_JS_DIR
    ESLINT_TARGET="${ESLINT_TARGET:-./resources/js}" # If not specified default to ./resources/js
    (set -x; eslint $FIX_OPT --max-warnings=0 --ext .js --ext .jsx --ext .mjs --ext .cjs "$ESLINT_TARGET")
}

function php_lint() {
    toolset_import_once php > /dev/null
    if [ "$LINT_FIX" == "yes" ]; then
        if [ -z "$1" ]; then
            (set -x; ./tools/php-cs-fixer/vendor/bin/php-cs-fixer fix .)
        else
            (set -x; ./tools/php-cs-fixer/vendor/bin/php-cs-fixer fix "$1")
        fi
    fi
    if [ -z "$1" ]; then
        (set -x; ./vendor/bin/phpstan analyse --memory-limit=8000M)
    else
        (set -x; ./vendor/bin/phpstan analyse --memory-limit=8000M --error-format=raw "$1")
    fi
}

function rust_lint() {
    toolset_import_once rust > /dev/null

    # Allow some lints
    # CLIPPYFLAGS="-A clippy::bool_comparison"

    if [ "$LINT_FIX" == "yes" ]; then
        # Cargo fix can't be run on a single file...
        (set -x; cargo clippy --fix --allow-dirty --allow-staged -- $CLIPPYFLAGS)
    else
        # Cargo clippy can't be run on a single file...
        (set -x; cargo clippy -- $CLIPPYFLAGS)
    fi

    # Format after
    if [ "$LINT_FORMAT" == "yes" ]; then
        if [ -z "$1" ]; then
            (set -x; cargo fmt)
        else
            (set -x; rustfmt "$1")
        fi
    fi
}

function lint_file() {
    CMD="$1"
    EXT="${CMD##*.}"
    case "$EXT" in
        c|cc|cpp|cxx|h|hh|hpp|hxx|inl)
            cpp_lint "$CMD"
            errcheck $? cpp_lint "Single cpp file lint failed in '$DIRNAME'."
            ;;
        cni|cpp2)
            ham_flymake_lint "$CMD"
            errcheck $? cpp_lint "Single cpp2 file lint failed in '$DIRNAME'."
            ;;
        php)
            php_lint "$CMD"
            errcheck $? php_lint "Single php file lint failed in '$DIRNAME'."
            ;;
        rs)
            rust_lint "$CMD"
            errcheck $? rust_lint "Single rust file lint failed in '$DIRNAME'."
            ;;
        js|jsx|mjs|cjs)
            js_lint "$CMD"
            errcheck $? js_lint "Single js file lint failed in '$DIRNAME'."
            ;;
        ni|nip|niw)
            ni_lint "$CMD"
            errcheck $? ni_lint "Single ni file lint failed in '$DIRNAME'."
            ;;
        sh)
            sh_lint "$CMD"
            errcheck $? sh_lint "Single sh file lint failed in '$DIRNAME'."
            ;;
        *)
            die "Unsupported extension '$EXT' for '$CMD' in '$DIRNAME'."
            ;;
    esac
}

function lint_dir() {
    LANG=$1
    DIRNAME=$2
    if [ ! -d "$DIRNAME" ]; then
        echo "E/'$DIRNAME' is not a directory, after '${LANG}'."
        return 1
    fi
    shift
    echo "I/${LANG}_lint all in '$DIRNAME'."
    pushd "$DIRNAME" >> /dev/null
    ${LANG}_lint
    errcheck $? ${LANG}_lint "${LANG} files lint failed in '$DIRNAME'."
    popd >> /dev/null
}

function lint_dir_or_file() {
  LANG=$1
  DIR_OR_FILENAME=$2
  if [ -d "$DIR_OR_FILENAME" ]; then
    lint_dir $LANG "$DIR_OR_FILENAME"
  else
    ${LANG}_lint "$DIR_OR_FILENAME"
  fi
}

function all_lint() {
    if [ -z "$1" ]; then
        echo "E/Nothing to lint specified in '$DIRNAME'."
        return 1
    fi

    while [ "$1" != "" ]; do
        CMD="$1"
        shift
        if [ -d "$CMD" ]; then
          log_error "Specified directory '$CMD' should be preceeded by the language to lint."
          return 1
        fi
        case "$CMD" in
            cpp)
                (set -e ; lint_dir_or_file cpp "$1")
                shift
                ;;
            php)
                (set -e ; lint_dir_or_file php "$1")
                shift
                ;;
            js)
                (set -e ; lint_dir_or_file js "$1")
                shift
                ;;
            rust)
                (set -e ; lint_dir_or_file rust "$1")
                shift
                ;;
            ni)
                (set -e ; lint_dir_or_file ni "$1")
                shift
                ;;
            sh)
                (set -e ; lint_dir_or_file sh "$1")
                shift
                ;;
            *)
                lint_file "$CMD"
                ;;
        esac
    done
}

function ham_lint_usage() {
  echo "usage:"
  echo "  ${SCRIPT_NAME} modes FILE"
  echo "  ${SCRIPT_NAME} modes language DIRECTORY"
  echo ""
  echo "  --lint          Lint the code."
  echo "  --fix           If possible fix the problems detected during linting."
  echo "  --format        If possible format the specified files."
  echo "  --check-format  Only check if the code would be formatted."
  echo "  --verbose       Use the most verbose output (meant for cli, not tools integration)."
  echo ""
  echo "  A directory can be checked at once by specifying the language"
  echo "  follow by the directory path"
  echo ""
  echo "examples:"
  echo "  ${SCRIPT_NAME} sources/MyModule/MyThing.cpp"
  echo "  ${SCRIPT_NAME} cpp sources/MyModule/"
  exit 1
}

function ham_lint_main() {
  export NO_LINT=yes
  if [[ "$1" != "-"* ]]; then
    log_error "No mode specified."
    ham_lint_usage
  fi
  while [[ "$1" == "-"* ]]; do
    if [ "$1" == "--fix" ]; then
      shift
      export LINT_FIX=yes
    elif [ "$1" == "--format" ]; then
      shift
      export LINT_FORMAT=yes
    elif [ "$1" == "--check-format" ]; then
      shift
      export LINT_CHECK_FORMAT=yes
    elif [ "$1" == "--lint" ]; then
      shift
      export NO_LINT=
    elif [ "$1" == "--verbose" ]; then
      shift
      export LINT_VERBOSE=yes
    else
      log_error "Unknown option '$1'."
      ham_lint_usage || return 1
    fi
  done

  if [ -z "$1" ]; then
    log_error "No path to lint specified."
    ham_lint_usage
  else
    all_lint "$@"
  fi
}

ham_lint_main "$@"
