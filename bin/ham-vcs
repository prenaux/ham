#!/bin/bash -e
#===== PRELUDE BEGIN ===========
if [[ -z "$HAM_HOME" ]]; then
  echo "E/HAM_HOME not set !"
  exit 1
fi
# shellcheck disable=SC2034
SCRIPT_NAME=$(basename "$0")
#SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
. "$HAM_HOME/bin/ham-bash-setenv.sh"
#===== PRELUDE TOOLSETS ========
export HAM_NO_VER_CHECK=1
#===== PRELUDE END =============

usage() {
  echo "usage: ham-vcs COMMAND [args]"
  echo ""
  echo "  Unified VCS commands for git and svn."
  echo ""
  echo "commands:"
  echo "  help                  - Show the command usage"
  echo "  check_vcs DIR         - Print the 'vsc: TYPE' if the folder is under VC"
  echo "  clone URL [DIR] [REV] - Clone a repository from URL, optionally check out REV"
  echo "  info                  - Show VCS type and repository info"
  echo "  status                - Show working directory status"
  echo "  diff                  - Show uncommitted changes"
  echo "  get_latest            - Get latest changes from server"
  echo "  save [MSG]            - Save changes locally (commits to local branch)"
  echo "  submit COMMIT_MSG     - Send changes to server with commit message."
  echo "                          (Amends last commit/changelist msg if possible)"
  echo "  log                   - Show commit history"
  echo ""
  if [[ "$1" == "help" ]]; then
    exit 0
  else
    exit 1
  fi
}

########################################################################
##  Git
########################################################################
git_clone() {
  if [ $# -eq 0 ]; then
    log_error "ham-vcs: git_clone: Repository URL required"
    usage
  fi

  # Parse arguments
  URL="$1"
  DIR=""
  REV=""
  if [ $# -gt 1 ]; then
    DIR="$2"
    if [ $# -gt 2 ]; then
      REV="$3"
    fi
  fi

  # Clone the repository
  if [ -n "$DIR" ]; then
    git clone "$URL" "$DIR"
    if [ -n "$REV" ]; then
      log_info "Checking out $REV..."
      (cd "$DIR" && git checkout "$REV")
    fi
  else
    git clone "$URL"
    if [ -n "$REV" ]; then
      local REPO_DIR=$(basename "$URL" .git)
      log_info "Checking out $REV..."
      (cd "$REPO_DIR" && git checkout "$REV")
    fi
  fi
}

git_info() {
  log_info "VCS: git ($(pwd))"
  git-head-info
  log_info "Remote URLs:"
  git remote -v
  log_info "Current branch: $(git rev-parse --abbrev-ref HEAD)"
}

git_status() {
  log_info "VCS: git ($(pwd))"
  LOCAL_COMMITS=$(git rev-list --count '@{u}..HEAD' 2>/dev/null || echo "0")
  if [ "$LOCAL_COMMITS" -gt 0 ]; then
    log_info "$LOCAL_COMMITS local commit(s) not pushed:"
    git log --oneline '@{u}..HEAD'
  fi

  git-status short
}

git_get_latest() {
  git-update .
}

git_log() {
  git log --oneline --graph -10 "$@"
}

git_diff() {
  git diff "$@"
}

git_save() {
  # Stage all changes
  git add -A

  # Check if there are changes to commit
  if ! git diff --cached --quiet; then
    # Use provided message or generate one
    if [ $# -gt 0 ]; then
      MESSAGE="$1"
    else
      MESSAGE="Save $(arch_date)"
    fi

    log_info "Saving changes locally..."
    git commit -m "$MESSAGE"
  else
    log_info "No changes to save"
  fi
}

git_submit() {
  if [ $# -eq 0 ]; then
    log_error "Commit message required"
    usage
  fi
  MESSAGE="$1"

  # Check if there are staged changes
  if ! git diff --cached --quiet; then
    log_info "Committing staged changes..."
    git commit -m "$MESSAGE"
  else
    # No staged changes, check if there's anything to push
    UNPUSHED=$(git rev-list --count '@{u}..HEAD' 2>/dev/null || echo "0")

    if [ "$UNPUSHED" -eq 0 ]; then
      log_info "Nothing to push"
      return 0
    else
      # There are commits to push, amend the last commit with new message
      log_info "Amending last commit message..."
      PREV_MESSAGE=$(git log -1 --pretty=%B)
      COMBINED_MESSAGE="$MESSAGE

$PREV_MESSAGE"
      git commit --amend -m "$COMBINED_MESSAGE"
    fi
  fi

  log_info "Pushing to remote..."
  git push --force-with-lease
}

########################################################################
##  SVN
########################################################################
svn_clone() {
  if [ $# -eq 0 ]; then
    log_error "Repository URL required"
    usage
  fi

  # Parse arguments
  URL="$1"
  DIR=""
  REV=""
  if [ $# -gt 1 ]; then
    DIR="$2"
    if [ $# -gt 2 ]; then
      REV="$3"
    fi
  fi

  # Add revision to URL if specified
  if [ -n "$REV" ]; then
    if [ "${REV:0:1}" = "r" ] && [ "${REV#r}" -eq "${REV#r}" ] 2>/dev/null; then
      # It's a revision number
      CHECKOUT_URL="$URL@${REV#r}"
      log_info "Checking out revision $REV from $URL..."
    else
      # It's a branch path
      CHECKOUT_URL="$URL/$REV"
      log_info "Checking out branch $REV from $URL..."
    fi
  else
    CHECKOUT_URL="$URL"
  fi

  # Execute checkout
  if [ -n "$DIR" ]; then
    svn checkout "$CHECKOUT_URL" "$DIR"
  else
    svn checkout "$CHECKOUT_URL"
  fi
}

svn_info() {
  log_info "VCS: svn ($(pwd))"
  svn info | grep -v '^$'
}

svn_status() {
  log_info "VCS: svn ($(pwd))"
  svn status
}

svn_get_latest() {
  svn update
}

svn_log() {
  svn log -l 10 "$@"
}

svn_diff() {
  svn diff "$@"
}

svn_save() {
  log_info "SVN commits directly to the server - use 'ham-vcs submit'"
}

svn_submit() {
  if [ $# -eq 0 ]; then
    log_error "Commit message required"
    usage
  fi

  MESSAGE="$1"

  svn commit -m "$MESSAGE"
}

########################################################################
##  Main
########################################################################
COMMAND=$1
if [[ -z "$COMMAND" ]]; then
  log_error "No command specified"
  usage
fi
shift

# Detect VCS type
case "$COMMAND" in
  help)
    usage help
    ;;

  clone)
    # Detect VCS type from URL
    if [ $# -eq 0 ]; then
      log_error "Repository URL required"
      usage
    fi

    URL="$1"
    case "$URL" in
      *.git | git*)
        VCS_TYPE="git"
        ;;
      svn:* | https://svn.*)
        VCS_TYPE="svn"
        ;;
      *)
        log_error "Cannot determine VCS type from URL: $URL"
        log_info "URL should end in .git or start with git for Git, or start with svn for Subversion"
        exit 1
        ;;
    esac
    ;;

  *)
    if [ "$COMMAND" == "check_vcs" ]; then
      if [ -z "$1" ]; then
        log_error "check_vcs: DIR not specified."
        usage
      fi
      if [ -d "$1" ]; then
        cd "$1"
        shift
      else
        exit 0
      fi
    fi

    # All other commands need an existing repo
    if [[ -d ".git" ]]; then
      VCS_TYPE="git"
    elif [[ -d ".svn" ]]; then
      VCS_TYPE="svn"
    else
      if [ "$COMMAND" == "check_vcs" ]; then
        exit 0
      fi
      log_error "No VCS repository found in current directory: $(pwd)"
      usage
    fi

    if [ "$COMMAND" == "check_vcs" ]; then
      echo "VCS: $VCS_TYPE"
      exit 0
    fi
    ;;
esac

case "$VCS_TYPE" in
  git)
    toolset_import_once repos >/dev/null
    ;;
  svn)
    toolset_import_once svn >/dev/null
    ;;
  *)
    log_error "Unknown VCS: $VCS_TYPE"
    usage
    ;;
esac

# Execute command
FUNC_NAME="${VCS_TYPE}_${COMMAND}"
if type "$FUNC_NAME" &>/dev/null; then
  "$FUNC_NAME" "$@"
else
  complain ham-vcs "Unknown command: $COMMAND"
  usage
fi
