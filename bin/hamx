#!/bin/bash
if [[ -z "$HAM_HOME" ]]; then
  HAM_HOME="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
  export HAM_HOME
  echo "W/HAM_HOME not set, set to:" "$HAM_HOME"
fi
. "$HAM_HOME/bin/ham-bash-setenv.sh"

function usage() {
  echo "usage:"
  echo "  hamx :toolkit ENV=value -ham-flag target script.sh ..."
  echo "  hamx somescript.sh"
  echo "  hamx some/_build.ham"
  echo "  hamx build_path some/_build.ham"
  echo "  hamx build_path some/file.cpp codegen"
  echo ""
  echo "  :toolkit     Import a toolkit."
  echo "  ENV=value    Set an environment variable for the ham command."
  echo "  -ham-flag    Specify an option to pass to ham as-is."
  echo "  target       Specify a target to be passed to the ham command."
  echo "  script.sh    Specify a script to be run by the ham command."
  echo ""
  echo "Notes:"
  echo "  The execution order is always the same regardless of the parameter orders:"
  echo "  1. The toolkits are imported"
  echo "  2. The environment variables are set"
  echo "  3. The bash scripts are executed"
  echo "  4. The ham targets are built using the specified ham flags if any"
  echo ""
}

function hamx_build_ham() {
  local FILEPATH
  FILEPATH=$(abspath "$1")
  log_info "Building: $FILEPATH"
  shift

  local DIRNAME
  DIRNAME=$(dirname "$FILEPATH")

  local BUILD_HAM_PATH
  BUILD_HAM_PATH=$(ham-find-file-up "_build.ham" "$DIRNAME")
  if [ ! -e "$BUILD_HAM_PATH" ]; then
    log_error "Can't find _build.ham for '$FILEPATH'."
    return 1
  fi
  log_info "BUILD_HAM_PATH: $BUILD_HAM_PATH"

  HAM_PROJECT=$(ham-find-file-up _ham_project "$DIRNAME")
  if [ ! -e "$HAM_PROJECT" ]; then
    log_error "Can't find _ham_project for '$BUILD_HAM_PATH'."
    return 1
  fi
  log_info "HAM_PROJECT: $HAM_PROJECT"

  HAM_PROJECT_DIR=$(dirname "$HAM_PROJECT")

  local TARGETS
  TARGETS=$(rg --no-line-number --no-filename --color never -o "tkDef\w+\s+(\S+)\s*:?" --replace '$1' "$BUILD_HAM_PATH" | coreutils tr '\n' ' ')
  if [ -z "$TARGETS" ]; then
    log_error "Can't find any targets in '$BUILD_HAM_PATH'."
    return 1
  fi
  log_info "TARGETS: $TARGETS"

  (
    set -x
    cd "$HAM_PROJECT_DIR"
    # shellcheck disable=SC2086
    ham -T "$HAM_PROJECT" "$@" $TARGETS
  )
}

function hamx_run_bash() {
  local SH_SCRIPT_PATH
  if [ -e "$1" ]; then
    SH_SCRIPT_PATH=$(abspath "$1")
  else
    SH_SCRIPT_PATH=$(ham-find-file-up "$1")
  fi
  if [ ! -e "$SH_SCRIPT_PATH" ]; then
    log_error "Can't find bash script '$1'."
    return 1
  fi
  log_info "SH_SCRIPT_PATH: $SH_SCRIPT_PATH"

  DIRNAME=$(dirname "$SH_SCRIPT_PATH")

  HAM_PROJECT=$(ham-find-file-up _ham_project "$DIRNAME")
  if [ ! -e "$HAM_PROJECT" ]; then
    log_error "Can't find _ham_project for '$SH_SCRIPT_PATH'."
    return 1
  fi
  log_info "HAM_PROJECT: $HAM_PROJECT"

  HAM_PROJECT_DIR=$(dirname "$HAM_PROJECT")

  (
    set -x
    cd "$HAM_PROJECT_DIR"
    ham -T "$HAM_PROJECT" "$SH_SCRIPT_PATH"
  )
}

# Script to wrap 'ham' command according to your specifications
function hamx() {
  if [[ $# -eq 0 ]]; then
    usage
    return 1
  fi

  local toolkits=()
  local envs=()
  local targets=()
  local scripts=()
  local flags=()

  for arg in "$@"; do
    if [[ "$arg" == *=* ]] && [[ ! "$arg" == *.* ]]; then
      envs+=("-E" "$arg")
    elif [[ "$arg" == :* ]]; then
      toolkits+=("-X" "${arg#*:}")
    elif [[ "$arg" == *.sh ]]; then
      scripts+=("$arg")
    elif [[ "$arg" == -* ]]; then
      flags+=("$arg")
    else
      targets+=("$arg")
    fi
  done

  if [[ ${#targets[@]} -eq 0 ]] && [[ ${#scripts[@]} -eq 0 ]]; then
    log_error "No targets or scripts specified."
    usage
    return 1
  fi

  if [[ ${#flags[@]} -eq 0 ]]; then
    (
      set -ex
      ham "${envs[@]}" "${toolkits[@]}" "${scripts[@]}" "${targets[@]}"
    )
  else
    (
      set -ex
      ham "${envs[@]}" "${toolkits[@]}" "${scripts[@]}" -- "${flags[@]}" "${targets[@]}"
    )
  fi
}

if [[ $# -eq 1 && "$1" == *.sh ]]; then
  hamx_run_bash "$1"
elif [[ $# -eq 1 && -e "$1" ]]; then
  hamx_build_ham "$1"
elif [[ "$1" == "build_path" ]]; then
  shift
  hamx_build_ham "$@"
else
  # Invoke hamx with all passed arguments
  hamx "$@"
fi
