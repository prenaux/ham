#!/bin/bash
export HAM_NO_VER_CHECK=1
if [[ -z "$HAM_HOME" ]]; then
  echo "E/HAM_HOME not set !"
  exit 1
fi
. "$HAM_HOME/bin/ham-bash-setenv.sh"

find_remedybg() {
  local path
  for path in \
    "c:/Utils/Apps/remedybg/remedybg.exe" \
    "$WORK/Playground/data/_tools/remedybg/remedybg.exe" \
    "$SHARED_WORK/../bin/nt-x64/remedybg.exe"; do
    if [ -f "$path" ]; then
      echo "$path"
      return 0
    fi
  done
  echo ""
}

usage() {
  echo "usage:"
  echo "  ${0##*/} EXE [ARGS]"
  echo ""
  echo "Supported platforms:"
  echo "  Windows:"
  echo "  - If available use RemedyBG and loads a specific .rdbg session file for persistence."
  echo "  - Otherwise try to the Visual Studio debugger."
  echo "  Linux:"
  echo "  - Use GDB and creates/loads a .gdb config file for persistence."
  echo "  macOS:"
  echo "  - Use LLDB direct launch with the run command."
  echo ""
  case $HAM_OS in
    NT*)
      REMEDYBG_PATH=$(find_remedybg)
      MSVC_IDE_DIR=$(msvc-find-ide-dir)
      echo "Local environment:"
      echo "  REMEDYBG_PATH: $REMEDYBG_PATH"
      echo "  MSVC_IDE_DIR: $MSVC_IDE_DIR"
      echo ""
      ;;
  esac
  exit 1
}

EXE_PATH="$1"
if [ -z "$EXE_PATH" ]; then
  log_error "No executable specified."
  usage
fi
shift

EXE_BASENAME=$(basename "${EXE_PATH}")
EXE_ARGS=("$@")
EXE_DIR=$(dirname "$EXE_PATH")
EXE_PARENT_DIR=$(basename "$EXE_DIR")
NAME_ARGS=$(printf "_%s" "${EXE_ARGS[@]}")

OUT_DIR="${SHARED_WORK:-$WORK}/ham_gdb_sessions_${EXE_PARENT_DIR}"
OUT_DIR=$(echo "$OUT_DIR" | tr ' ,-.+=' '_')
OUT_BASENAME="${EXE_BASENAME}${NAME_ARGS}"
OUT_BASENAME=$(echo "$OUT_BASENAME" | tr ' ,-.+=' '_')
WORKING_DIR="$(pwd)"

log_info "WORKING_DIR: $WORKING_DIR"
log_info "EXE_PATH: $EXE_PATH"
log_info "EXE_ARGS: ${EXE_ARGS[*]}"
log_info "OUT_DIR: $OUT_DIR"
log_info "OUT_BASENAME: $OUT_BASENAME"

case $HAM_OS in
  ########################################################################
  ## Windows: Use RemedyBG if available otherwise try to use devenv.exe
  ########################################################################
  NT*)
    if [ -z "$REMEDYBG_PATH" ]; then
      REMEDYBG_PATH=$(find_remedybg)
    fi

    if [ -n "$REMEDYBG_PATH" ]; then
      RDBG_SESSION_FILE="${OUT_DIR}/${OUT_BASENAME}.rdbg"
      log_info "REMEDYBG_PATH: $REMEDYBG_PATH"
      log_info "RDBG_SESSION_FILE: $RDBG_SESSION_FILE"
      mkdir -p "$(dirname "$RDBG_SESSION_FILE")"

      if [ ! -e "$EXE_PATH" ]; then
        log_error "Can't find the exe at '$EXE_PATH'."
        usage
      fi

      if [ -e "$RDBG_SESSION_FILE" ]; then
        log_info "Found the session file so opening that."
        (
          set -x
          "$REMEDYBG_PATH" -g -q "$RDBG_SESSION_FILE" &
          true
        )
      else
        log_info "No session file, opening the exe directly."
        (
          set -x
          "$REMEDYBG_PATH" -g -q "$EXE_PATH" "${EXE_ARGS[@]}" &
          true
        )
      fi
    else
      if [ -z "$MSVC_DEVENV_PATH" ]; then
        MSVC_IDE_DIR=$(msvc-find-ide-dir)
        if [ -n "$MSVC_IDE_DIR" ]; then
          MSVC_DEVENV_PATH="$MSVC_IDE_DIR/Common7/IDE/devenv.exe"
        else
          log_error "Neither RemedyBG nor Visual Studio found"
          usage
        fi
      fi
      log_info "MSVC_DEVENV_PATH: $MSVC_DEVENV_PATH"
      (
        set -x
        "$MSVC_DEVENV_PATH" -debugexe "$EXE_PATH" "${EXE_ARGS[@]}" &
        true
      )
    fi
    ;;

  ########################################################################
  ## macOS: Use gdb with a decent setup
  ########################################################################
  LINUX*)
    GDB_FILE="${OUT_DIR}/${OUT_BASENAME}.gdb"
    log_info "GDB_FILE: $GDB_FILE"
    if [ ! -e "$GDB_FILE" ]; then
      mkdir -p "${OUT_DIR}"
      GDB_FILE_BASENAME=$(basename "$GDB_FILE")
      {
        echo "# GDB_FILE: $GDB_FILE_BASENAME"
        echo "# WORKING_DIR: $WORKING_DIR"
        echo "# EXE_PATH: $EXE_PATH"
        echo "# EXE_ARGS: ${EXE_ARGS[*]}"
        echo "# OUT_DIR: $OUT_DIR"
        echo "# OUT_BASENAME: $OUT_BASENAME"
      } >"$GDB_FILE"
    fi

    if [ "$HAM_GDB_TMUX_DASHBOARD" == "1" ]; then
      ham-gdb-tmux-dashboard "${EXE_ARGS[@]}"
    else
      (
        set -x
        gdb -q --nh --nx -iex "add-auto-load-safe-path \"$HAM_HOME\"" \
          -iex "add-auto-load-safe-path \"$OUT_DIR\"" \
          -iex "file \"$EXE_PATH\"" \
          -ix "$HAM_HOME/bin/ham-gdb--init-config" \
          -ix "$GDB_FILE" \
          -ex run --args "$EXE_PATH" "${EXE_ARGS[@]}"
      )
      log_info "GDB_FILE: $GDB_FILE"
      log_info "Done debugging: \"$EXE_PATH\" ${EXE_ARGS[*]}"
    fi
    ;;

  ########################################################################
  ## macOS: Use lldb
  ########################################################################
  OSX*)
    PATH="/usr/bin:$PATH" lldb --one-line "run" -- "$EXE_PATH" "${EXE_ARGS[@]}"
    ;;

  ########################################################################
  ## Others
  ########################################################################
  *)
    log_error "Toolset: Unsupported host OS"
    return 1
    ;;
esac
