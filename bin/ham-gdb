#!/bin/bash
export HAM_NO_VER_CHECK=1
if [[ -z "$HAM_HOME" ]]; then
  echo "E/HAM_HOME not set !"
  exit 1
fi
. "$HAM_HOME/bin/ham-bash-setenv.sh"

if [[ -e "$HOME/_ham_gdb" ]]; then
  . "$HOME/_ham_gdb"
  log_info "Imported HOME '$HOME/_ham_gdb'."
elif [[ -e "$USERPROFILE/_ham_gdb" ]]; then
  . "$USERPROFILE/_ham_gdb"
  log_info "Imported USERPROFILE '$USERPROFILE/_ham_gdb'."
else
  log_info "Did not find any _ham_gdb to import."
fi

if [[ -z "$SHARED_WORK" ]]; then
  log_error "ham-gdb: SHARED_WORK not set !"
  exit 1
fi
SHARED_WORK="$(nativedir "$SHARED_WORK")"

find_remedybg() {
  if [ -n "$REMEDYBG_PATH" ]; then
    if [ -e "$REMEDYBG_PATH" ]; then
      echo "$REMEDYBG_PATH"
    else
      log_warning "Cant find REMEDYBG_PATH '$REMEDYBG_PATH'."
    fi
  else
    local path="c:/Utils/Apps/remedybg/remedybg.exe"
    if [ -f "$path" ]; then
      echo "$path"
      return 0
    fi
  fi
  echo ""
}

find_msvc_ide() {
  if [ -e "$HAM_HOME/toolsets/msvc_19_x64/msvc-find-ide-dir" ]; then
    "$HAM_HOME/toolsets/msvc_19_x64/msvc-find-ide-dir"
  else
    echo ""
  fi
}

usage() {
  echo "usage:"
  echo "  ${0##*/} EXE [ARGS]"
  echo "  ${0##*/} open-file filename [line-number]"
  echo "  ${0##*/} add-breakpoint filename line-number"
  echo "  ${0##*/} remove-breakpoint filename line-number"
  echo "  ${0##*/} bring-to-front"
  echo "  ${0##*/} gui"
  echo ""
  echo "Supported platforms:"
  echo "  Windows:"
  echo "  - If available use RemedyBG and loads a specific .rdbg session file for persistence."
  echo "  - Otherwise try to the Visual Studio debugger."
  echo "  Linux:"
  echo "  - Use GDB and creates/loads a .gdb config file for persistence."
  echo "  macOS:"
  echo "  - Use LLDB direct launch with the run command."
  echo ""
  case $HAM_OS in
    NT*)
      REMEDYBG_PATH=$(find_remedybg)
      MSVC_IDE_DIR=$(find_msvc_ide)
      echo "Local environment:"
      echo "  REMEDYBG_PATH: $REMEDYBG_PATH"
      echo "  MSVC_IDE_DIR: $MSVC_IDE_DIR"
      echo ""
      ;;
  esac
  exit 1
}

if [ -z "$1" ]; then
  log_error "ham-gdb: No executable or command specified."
  usage
fi

########################################################################
## Commands
########################################################################
command_open_file() {
  if [ -z "$1" ]; then
    log_error "ham-gdb: No filename specified"
    usage
  fi

  FILENAME="$1"
  LINE_NUMBER="$2"

  case $HAM_OS in
    NT*)
      REMEDYBG_PATH=$(find_remedybg)
      if [ -n "$REMEDYBG_PATH" ] && tasklist | grep -i "remedybg.exe" >/dev/null; then
        (
          set -x
          # shellcheck disable=SC2086
          "$REMEDYBG_PATH" open-file "$FILENAME" $LINE_NUMBER
          "$REMEDYBG_PATH" bring-debugger-to-foreground
        )
      else
        IDE_DIR=$(find_msvc_ide)
        if [ -n "$IDE_DIR" ]; then
          if [ -n "$LINE_NUMBER" ]; then
            (
              set -x
              "$IDE_DIR/devenv.exe" -Edit "$FILENAME" -Command "edit.goto $LINE_NUMBER"
            )
          else
            (
              set -x
              "$IDE_DIR/devenv.exe" -Edit "$FILENAME"
            )
          fi
        else
          log_error "ham-gdb: Neither RemedyBG nor Visual Studio found"
          exit 1
        fi
      fi
      ;;
    *)
      log_error "ham-gdb: open-file command not supported on this platform"
      exit 1
      ;;
  esac
}

command_bring_to_front() {
  case $HAM_OS in
    NT*)
      REMEDYBG_PATH=$(find_remedybg)
      if [ -n "$REMEDYBG_PATH" ] && tasklist | grep -i "remedybg.exe" >/dev/null; then
        (
          set -x
          "$REMEDYBG_PATH" bring-debugger-to-foreground
        )
      else
        log_warning "bring-to-front not supported for Visual Studio"
      fi
      ;;

    *)
      log_error "ham-gdb: bring-to-front command not supported on this platform"
      exit 1
      ;;
  esac
}

command_add_breakpoint() {
  if [ -z "$1" ] || [ -z "$2" ]; then
    log_error "ham-gdb: Filename and line number required"
    usage
  fi

  FILENAME="$1"
  LINE_NUMBER="$2"

  case $HAM_OS in
    NT*)
      REMEDYBG_PATH=$(find_remedybg)
      if [ -n "$REMEDYBG_PATH" ] && tasklist | grep -i "remedybg.exe" >/dev/null; then
        (
          set -x
          "$REMEDYBG_PATH" add-breakpoint-at-file "$FILENAME" "$LINE_NUMBER"
          "$REMEDYBG_PATH" open-file "$FILENAME" "$LINE_NUMBER"
          "$REMEDYBG_PATH" bring-debugger-to-foreground
        )
      else
        log_warning "add-breakpoint not supported for Visual Studio"
      fi
      ;;

    *)
      log_error "ham-gdb: add-breakpoint command not supported on this platform"
      exit 1
      ;;
  esac
}

command_remove_breakpoint() {
  if [ -z "$1" ] || [ -z "$2" ]; then
    log_error "ham-gdb: Filename and line number required"
    usage
  fi

  FILENAME="$1"
  LINE_NUMBER="$2"

  case $HAM_OS in
    NT*)
      REMEDYBG_PATH=$(find_remedybg)
      if [ -n "$REMEDYBG_PATH" ]; then
        (
          set -x
          "$REMEDYBG_PATH" remove-breakpoint-at-file "$FILENAME" "$LINE_NUMBER"
          "$REMEDYBG_PATH" open-file "$FILENAME" "$LINE_NUMBER"
        )
      else
        log_warning "remove-breakpoint not supported for Visual Studio"
      fi
      ;;

    *)
      log_error "ham-gdb: remove-breakpoint command not supported on this platform"
      exit 1
      ;;
  esac
}

command_gui() {
  case $HAM_OS in
    NT*)
      REMEDYBG_PATH=$(find_remedybg)
      if [ -n "$REMEDYBG_PATH" ]; then
        (
          set -x
          "$REMEDYBG_PATH" "$@"
        )
      else
        IDE_DIR=$(find_msvc_ide)
        if [ -n "$IDE_DIR" ]; then
          (
            set -x
            "$IDE_DIR/devenv.exe" "$@"
          )
        else
          log_error "ham-gdb: Neither RemedyBG nor Visual Studio found"
          exit 1
        fi
      fi
      ;;
    LINUX*)
      (
        set -x
        gdb "$@"
      )
      ;;
    OSX*)
      (
        set -x
        lldb "$@"
      )
      ;;
    *)
      log_error "ham-gdb: gui command not supported on '$HAM_OS'."
      exit 1
      ;;
  esac
}

########################################################################
## Handle commands
########################################################################
case "$1" in
  open-file)
    shift
    command_open_file "$@"
    exit 0
    ;;
  bring-to-front)
    shift
    command_bring_to_front "$@"
    exit 0
    ;;
  add-breakpoint)
    shift
    command_add_breakpoint "$@"
    exit 0
    ;;
  remove-breakpoint)
    shift
    command_remove_breakpoint "$@"
    exit 0
    ;;
  gui)
    shift
    command_gui "$@"
    exit 0
    ;;
  *)
    EXE_PATH="$1"
    if [ ! -e "$EXE_PATH" ]; then
      log_error "ham-gdb: Can't find the exe at '$EXE_PATH' and not a valid command."
      usage
    fi
    ;;
esac
shift

########################################################################
## Debugging sessions
########################################################################
EXE_PATH=$(abspath "${EXE_PATH}")
EXE_BASENAME=$(basename "${EXE_PATH}")
EXE_ARGS=("$@")
EXE_DIR=$(dirname "$EXE_PATH")
EXE_PARENT_DIR=$(basename "$EXE_DIR")
NAME_ARGS=$(printf "_%s" "${EXE_ARGS[@]}")

OUT_DIR="${SHARED_WORK}/ham_gdb_sessions_${EXE_PARENT_DIR}"
OUT_DIR=$(echo "$OUT_DIR" | tr ' ,-.+=' '_')
mkdir -p "$OUT_DIR"
if [ ! -d "$OUT_DIR" ]; then
  log_error "Cant find or initialize OUT_DIR: $OUT_DIR."
  usage
fi
OUT_DIR=$(nativedir "$OUT_DIR")

if [ -n "$HAM_GDB_OUT_BASENAME" ]; then
  OUT_BASENAME="${HAM_GDB_OUT_BASENAME}"
else
  OUT_BASENAME="${EXE_BASENAME}${NAME_ARGS}"
  OUT_BASENAME=$(echo "$OUT_BASENAME" | tr ' ,-.+=/:' '_')
fi
WORKING_DIR=$(nativedir $(pwd))

log_info "SHARED_WORK: $SHARED_WORK"
log_info "WORKING_DIR: $WORKING_DIR"
log_info "EXE_PATH: $EXE_PATH"
log_info "EXE_ARGS: ${EXE_ARGS[*]}"
log_info "OUT_DIR: $OUT_DIR"
log_info "OUT_BASENAME: $OUT_BASENAME"

case $HAM_OS in
  ########################################################################
  ## Windows: Use RemedyBG if available otherwise try to use devenv.exe
  ########################################################################
  NT*)
    REMEDYBG_PATH=$(find_remedybg)
    if [ -n "$REMEDYBG_PATH" ]; then
      log_info "REMEDYBG_PATH: $REMEDYBG_PATH"

      RDBG_SESSION_FILE="$(nativedir "${OUT_DIR}")/${OUT_BASENAME}.rdbg"
      log_info "RDBG_SESSION_FILE: $RDBG_SESSION_FILE"

      RDBG_GEN_EXE="$(dirname "$REMEDYBG_PATH")/rdbg_gen.exe"
      if [ ! -e "$RDBG_SESSION_FILE" ]; then
        log_info "Generating the session file."
        (
          mkdir -p "$(dirname "$RDBG_SESSION_FILE")"
          "$RDBG_GEN_EXE" "$RDBG_SESSION_FILE" "$WORKING_DIR" "$EXE_PATH" "${EXE_ARGS[@]}"
        )
      fi

      if [ -e "$RDBG_SESSION_FILE" ]; then
        log_info "Opening the existing session file."
        (
          set -x
          "$REMEDYBG_PATH" -g -q "$RDBG_SESSION_FILE"
        )
      else
        log_info "No session file, opening the exe directly."
        (
          set -x
          "$REMEDYBG_PATH" -g -q "$EXE_PATH" "${EXE_ARGS[@]}"
        )
      fi
    else
      if [ -z "$MSVC_DEVENV_PATH" ]; then
        MSVC_IDE_DIR=$(find_msvc_ide)
        if [ -n "$MSVC_IDE_DIR" ]; then
          MSVC_DEVENV_PATH="$MSVC_IDE_DIR/devenv.exe"
        else
          log_error "ham-gdb: Neither RemedyBG nor Visual Studio found"
          usage
        fi
      fi

      VCSLN_SESSION_FILE="$(nativedir "${OUT_DIR}")/${OUT_BASENAME}.sln"
      log_info "VCSLN_SESSION_FILE: $VCSLN_SESSION_FILE"

      if [ ! -e "$VCSLN_SESSION_FILE" ]; then
        log_info "Generating the session file."
        (
          mkdir -p "$(dirname "$VCSLN_SESSION_FILE")"
          export OUT_BASENAME
          VCSLN_EXE_PATH=$(abspath "${EXE_PATH}")
          VCSLN_EXE_PATH="${VCSLN_EXE_PATH//\//\\}"
          export VCSLN_EXE_PATH
          VCSLN_EXE_DIR=$(abspath "${VCSLN_EXE_DIR}")
          VCSLN_EXE_DIR="${VCSLN_EXE_DIR//\//\\}"
          export VCSLN_EXE_DIR
          VCSLN_WORKING_DIR=$(abspath "${WORKING_DIR}")
          VCSLN_WORKING_DIR="${VCSLN_WORKING_DIR//\//\\}"
          export VCSLN_WORKING_DIR
          VCSLN_EXE_ARGS="${EXE_ARGS[@]}"
          VCSLN_EXE_ARGS="$(echo ${VCSLN_EXE_ARGS[*]})"
          VCSLN_EXE_ARGS=$(echo "$VCSLN_EXE_ARGS" | sed -E 's|/([a-zA-Z])/|\1:/|g')
          export VCSLN_EXE_ARGS
          VCSLN_PRJ_UUID=$(genuuid)
          export VCSLN_PRJ_UUID
          VCSLN_EXE_UUID=$(genuuid)
          export VCSLN_EXE_UUID
          envsubst <"$HAM_HOME/sources/templates/vcdbg_session_file.sln" | tee "${VCSLN_SESSION_FILE}"
        )
      fi

      log_info "MSVC_DEVENV_PATH: $MSVC_DEVENV_PATH"
      (
        set -x
        # '</dev/null >/dev/null 2>&1 &' as for side effect to detach the
        # process from the caller
        "$MSVC_DEVENV_PATH" "${VCSLN_SESSION_FILE}" </dev/null >/dev/null 2>&1 &
        true
      )
    fi
    ;;

  ########################################################################
  ## Linux: Use gdb with a decent setup
  ########################################################################
  LINUX*)
    GDB_FILE="${OUT_DIR}/${OUT_BASENAME}.gdb"
    log_info "GDB_FILE: $GDB_FILE"
    if [ ! -e "$GDB_FILE" ]; then
      mkdir -p "${OUT_DIR}"
      GDB_FILE_BASENAME=$(basename "$GDB_FILE")
      {
        echo "# GDB_FILE: $GDB_FILE_BASENAME"
        echo "# WORKING_DIR: $WORKING_DIR"
        echo "# EXE_PATH: $EXE_PATH"
        echo "# EXE_ARGS: ${EXE_ARGS[*]}"
        echo "# OUT_DIR: $OUT_DIR"
        echo "# OUT_BASENAME: $OUT_BASENAME"
      } >"$GDB_FILE"
    fi

    if [ "$HAM_GDB_TMUX_DASHBOARD" == "1" ]; then
      ham-gdb-tmux-dashboard "${EXE_ARGS[@]}"
    else
      (
        set -x
        gdb -q --nh --nx -iex "add-auto-load-safe-path \"$HAM_HOME\"" \
          -iex "add-auto-load-safe-path \"$OUT_DIR\"" \
          -iex "file \"$EXE_PATH\"" \
          -ix "$HAM_HOME/bin/ham-gdb--init-config" \
          -ix "$GDB_FILE" \
          -ex run --args "$EXE_PATH" "${EXE_ARGS[@]}"
      )
      log_info "GDB_FILE: $GDB_FILE"
      log_info "Done debugging: \"$EXE_PATH\" ${EXE_ARGS[*]}"
    fi
    ;;

  ########################################################################
  ## macOS: Use lldb
  ########################################################################
  OSX*)
    PATH="/usr/bin:$PATH" lldb --one-line "run" -- "$EXE_PATH" "${EXE_ARGS[@]}"
    ;;

  ########################################################################
  ## Others
  ########################################################################
  *)
    log_error "ham-gdb: Toolset: Unsupported host OS"
    return 1
    ;;
esac
