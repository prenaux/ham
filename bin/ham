#!/bin/bash
EXEC_TIME="$(date +%s)"
PREV_PATH=${PATH}
if [[ -z "$HAM_HOME" ]]; then
    export HAM_HOME="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
    echo "W/HAM_HOME not set, set to:" $HAM_HOME
fi
. "$HAM_HOME/bin/ham-bash-setenv.sh"
export PATH=${PREV_PATH}:${PATH}

# the help
usage() {
    echo "usage: ham [ options ] targets|scripts..."
    echo "version:" `"${HAM_CMD}" -v`
    echo ""
    echo "ham launch script:"
    echo "  -h             This help message"
    echo "  -v             Print ham's executable version"
    echo "  -X toolkit     Import a toolkit's _ham_project and build it."
    echo "                 (equivalent to '-T toolkit -D toolkit')."
    echo "  -D toolkit     Add a toolkit to build - the toolkit should be in $WORK"
    echo "                 (can be specified multiple times)"
    echo "  -T toolset     Add a toolset to import"
    echo "                 (can be specified multiple times)"
    echo "  --             Following parameters will be passed to ham directly"
    echo ""
    echo "ham process:"
    "${HAM_CMD}" -? | grep "^[- ]"
    echo ""
    echo "example:"
    echo "  # Make all in the niLang & Vlk toolkits with the current toolsets."
    echo "  ham -D niLang -D Vlk all"
    echo "  # Run _build_bootstrap.sh in the niLang toolkit with the current toolsets."
    echo "  ham -D niLang _build_bootstrap.sh"
    echo "  # Make niLang for the web-js build target with the niLang toolsets."
    echo "  BUILD_TARGET=web-js ham -X niLang pass1 all"
    echo "  # Make the debug version of niLang for the web-js build target with the niLang toolsets"
    echo "  BUILD_TARGET=web-js BUILD=da ham -X niLang pass1 all"
    echo "  # Make the release build (ra) of the current toolkit. BUILD=ra is the default if not specified."
    echo "  ham BUILD=ra all"
    echo "  # Make all in the current toolkit, displaying all the commands."
    echo "  ham -- -dx all"
    echo ""

    if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
        # sourced...
        return 1
    else
        # regular call
        exit 1
    fi
}


HAM_CMD="$HAM_HOME/bin/$HAM_BIN_LOA/ham"
if [[ ! -e "$HAM_CMD" ]]; then
    echo "E/Can't find ham executable '$HAM_CMD'."
    echo ""
    usage
fi

# Check that there is at least one argument...
if [ $# = 0 ]; then
    echo "E/No argument specified"
    echo ""
    usage
fi

# process the arguments
_ARG_TOOLSET=""
_ARG_DIRECTORIES=()

process_toolset() {
    OPTARG="$1"
    if [ -z "${_ARG_TOOLSET}" ]; then
      _ARG_TOOLSET="$OPTARG"
    else
      _ARG_TOOLSET="$_ARG_TOOLSET $OPTARG"
    fi
    # echo "_ARG_TOOLSET:" $_ARG_TOOLSET
}

process_directory() {
    OPTARG=`ham-url dec "$1"`
    if  [[ "$OPTARG" == ?:/* ]] || [[ "$OPTARG" == /* ]] || [[ "$OPTARG" == .* ]] ;
    then
        _ARG_DIRECTORY="$OPTARG"
        if [[ ! -e "$_ARG_DIRECTORY" ]]; then
            echo "E/Can't find directory '$_ARG_DIRECTORY'"
            usage
        fi
    else
        # Work App path
        _ARG_DIRECTORY="$WORK/$OPTARG/"
        if [[ ! -e "$_ARG_DIRECTORY" ]]; then
            echo "E/Can't find directory '$_ARG_DIRECTORY'"
            usage
        fi
    fi
    _ARG_DIRECTORIES+=("$_ARG_DIRECTORY")
}

while getopts "T:D:X:vh" OPT
do
    case "$OPT" in
        h)
            echo "I/help"
            echo ""
            usage
            ;;
        \?)
            echo "E/Invalid option"
            echo ""
            usage
            ;;
        v)
            log_info "HAM_CMD: ${HAM_CMD}"
            log_info "VERSION: $("$HAM_CMD" -v)"
            if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
                return 0
            else
                exit 0
            fi
            ;;
        T)
            process_toolset "$OPTARG"
            ;;
        D)
            process_directory "$OPTARG"
            ;;
        X)
            process_toolset "$OPTARG"
            process_directory "$OPTARG"
            ;;
        *)
            echo "E/Unknown option '$OPT'"
            usage
            ;;
    esac
done
shift $((OPTIND-1))

if [[ "$_ARG_TOOLSET" != "" ]]; then
    . "$HAM_HOME/bin/ham-bash-setenv.sh"
    export HAM_NO_VER_CHECK=${HAM_NO_VER_CHECK:-1}
    . ham-toolset "$_ARG_TOOLSET"
    errcheck $? ham "Can't setup the '$_ARG_TOOLSET' toolset."
fi

if [[ -z "$HAM_TOOLSET" ]]; then
    echo "E/No toolset set, you can set one with the -T flag or '. ham-toolset' ..."
    usage
fi

ham_or_bash() {
  # Initialize two arrays to hold .sh files and other parameters
  SH_FILES=()
  HAM_CMD_PARAMS=()

  # Separate .sh files from other parameters and validate bash scripts
  for PARAM in "$@"; do
      if [[ "$PARAM" == *.sh ]]; then
          if [[ ! -f "$PARAM" ]]; then
              log_error "Can't find '$PARAM' in '$(pwd)'."
              exit 1
          fi
          SH_FILES+=("$PARAM")
      else
          HAM_CMD_PARAMS+=("$PARAM")
      fi
  done

  # Run ham-validate-targets if there are parameters to pass to it
  HAM_EXEC_DIR="."
  if [ "${#HAM_CMD_PARAMS[@]}" -gt 0 ]; then
      if [[ ! -f "_build.ham" ]]; then
        if [[ ! -f "sources/_build.ham" ]]; then
            log_error "Can't find '_build.ham' and 'sources/_build.ham' in '$(pwd)'."
            exit 1
        else
            HAM_EXEC_DIR="./sources"
        fi
      fi
  fi

  # Execute collected .sh files directly
  for SH_FILE in "${SH_FILES[@]}"; do
      echo "I/Excuting '${SH_FILE}' in '$(pwd)'."
      "./$SH_FILE"
      errcheck $? ham "Script '${SH_FILE}' execution failed in '$(pwd)'."
  done

  # Run the remaining parameters with $HAM_CMD if there are any
  if [ "${#HAM_CMD_PARAMS[@]}" -gt 0 ]; then
      if [ -n "$HAM_EXEC_DIR" ]; then
        cd "$HAM_EXEC_DIR"
      fi
      echo "I/'ham ${HAM_CMD_PARAMS[@]}' in '$(pwd)'"
      "$HAM_CMD" "${HAM_CMD_PARAMS[@]}"
      errcheck $? ham "Ham build in '$DIR' failed."
  fi
}

hamIn() {
    export CWD="`pwd`"
    export DIR="$1"
    shift
    if [[ "$CWD" != "$DIR" ]]; then
        pushd "$DIR"
    fi
    ham_or_bash "$@"
    errcheck $? ham "Run in '$DIR' failed."
    if [[ "$CWD" != "$DIR" ]]; then
        popd > /dev/null
    fi
}

if [[ "$_ARG_DIRECTORY" != "" ]]; then
    for dir in "${_ARG_DIRECTORIES[@]}"; do
        hamIn "$dir" $*
    done
else
    hamIn . $*
fi

EXEC_TIME="$(($(date +%s)-EXEC_TIME))"
echo "...ham ran in ${EXEC_TIME}s..."
