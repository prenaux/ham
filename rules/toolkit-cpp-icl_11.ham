LINKLIBS += winmm.lib gdi32.lib user32.lib shell32.lib ;
SUFPCH = .pch ;

# tkC++PchObject PCH : CPP : HDR : PCH ;
rule tkC++PchObject
{
  MakeLocate $(<) : $(LOCATE_TARGET) ;
  SEARCH on $(>) = $(SEARCH_SOURCE) ;

  local _pch = $(4) ;
  local _cpp = $(>) ;
  local _hdr = $(3) ;
  local _obj = $(_cpp:S=$(SUFOBJ)) ;

  INCLUDES $(_pch) : $(_cpp) ;
  MakeLocate $(_pch) : $(LOCATE_TARGET) ;
  ObjectC++Flags $(_cpp) : -Yc"$(_hdr)" -Fp"$(_pch)" ;
}

# tkC++Pch TARGET : <pch>.cpp : [pchdep-sources] : [nopchdep-sources]
rule tkC++Pch
{
  local _src = ;
  local _extrasrc = ;
  for _i in $(3) {
    if $(_i) = $(>) { continue ; }
    _src += [ FGristFiles $(_i) ] ;
  }
  for _i in $(4) {
    if $(_i) = $(>) { continue ; }
    _extrasrc += [ FGristFiles $(_i) ] ;
  }

  local _pch = $(>:S=$(SUFPCH)) ;
  local _pchTarget = [ FDirName $(LOCATE_TARGET) $(>:S=$(SUFPCH)) ] ;
  local _cpp = [ FGristFiles $(>) ] ;
  local _hdr = $(>:S=.h) ;
  local _obj = $(_cpp:S=$(SUFOBJ)) ;

  tkC++PchObject $(_pch) : $(_cpp) : $(_hdr) : $(_pchTarget) ;

  INCLUDES $(<) : $(_cpp) ;
  DEPENDS $(<) : $(_obj) ;
  NotFile $(<) ;
  NoUpdate $(<) ;

  Clean clean : $(_pch) ;
  DEPENDS pch : $(<) ;

  ObjectC++Flags $(_src) : -Yu"$(_hdr)" -Fp"$(_pchTarget)" ;
  DEPENDS $(_src:S=$(SUFOBJ)) : $(<) ;
  DEPENDS $(_extrasrc:S=$(SUFOBJ)) : $(<) ;

  logVerbose "- PCH:" $(_pchTarget) ;
  return $(PCH) ;
}

rule tkCC++Build
{
  local strOpt = "" ;
  # Clean the .ilk file...
  local ILK = [ FDirName $(LOCATE_TARGET) $(PKGBUILD:S=.ilk) ] ;
  Clean clean : $(ILK) ;
  # Enable string pooling
  ObjectOptimFlags $(<) : -GF -GR- -Qstd=c99 -Qdiag-disable:82,120,133,144,167,177,186,188,344,424,869,981,1011,1419,1572,1786,2259 -Qdiag-error:266 ;
  # Set the debug infos generation
  if ! $(REDIST) {
    SUFPDB = .pdb ;
    PDB = [ FDirName $(LOCATE_TARGET) $(PKGBUILD:S=.pdb) ] ;
    ObjectOptimFlags $(<) : -Zi -Fd\"$(PDB)\" ;
    Clean clean : $(PDB) ;
    strOpt += "(PDB) " ;
  }
  # Set the optimization flags
  if ! $(DEBUG) {
    if $(OPT_NOOPT) = 1 {
      ObjectOptimFlags $(<) : -Od ;
      strOpt += "(NoOpt) " ;
    }
    else if $(OPT_MINSIZE) = 1 {
      ObjectOptimFlags $(<) : -O1 ;
      strOpt += "(OptMinSize) " ;
    }
    else {
      ObjectOptimFlags $(<) : -O2 ;
      strOpt += "(OptMaxSpeed) " ;
    }
    if $(TK_TOOLSET_VER) = 9 {
      ObjectOptimFlags $(<) : -GS- ;  # Disable buffer security check
      strOpt += "(NoBufferSecurity) " ;
    }
  }
  # Set debug-only flags
  else {
    ObjectOptimFlags $(<) : -Zi -debug -RTC1 -GS ;
    strOpt += "(DebugOnly) " ;
  }
  # Set the run-time lib flags
  if $(OPT_CRTDLL) = 1 {
    if $(DEBUG) {
      ObjectOptimFlags $(<) : -MDd ;
      strOpt += "(CRT-DLL-MT-DBG) " ;
    }
    else {
      ObjectOptimFlags $(<) : -MD ;
      strOpt += "(CRT-DLL-MT-REL) " ;
    }
  }
  else {
    if $(DEBUG) {
      ObjectOptimFlags $(<) : -MTd ;
      strOpt += "(CRT-STATIC-MT-DBG) " ;
    }
    else {
      ObjectOptimFlags $(<) : -MT ;
      strOpt += "(CRT-STATIC-MT-REL) " ;
    }
  }
  ObjectOptimFlags $(<) : -GF ;
  strOpt += "(StringPooling) " ;
  logVerbose "- CC++Build: " $(strOpt) ;
}

rule tkCC++Warnings
{
  ObjectOptimFlags $(<) : -W3 ;
  logVerbose "- C++ Warnings" ;
}

rule tkC++Exceptions {
  ObjectOptimFlags $(<) : -EHa ;
}
rule tkNoC++Exceptions {
}

rule tkC++RTTI {
  ObjectOptimFlags $(<) : -GR ;
}
rule tkNoC++RTTI {
  ObjectOptimFlags $(<) : -GR- ;
}
