#----------------------------------------------------------------------
#     COMMON
#----------------------------------------------------------------------
SHADER_HDRS_DEPS ?= 1 ;
if $(WINDOWS) = 1 {
  SHADER_COMPILE ?= 1 ;
  # Use the local nicgc compiler
  SHADER_NICGC_SERVER ?= ;
}
else if $(OSX) = 1 {
  # It is by default since the remote shader compiler would make the build
  # dependant on an internet connection.
  SHADER_COMPILE ?= 0 ;
  # Use the remote nicgc compiler
  SHADER_NICGC_SERVER ?= "http://nicgc.bitscollider.com" ;
}
else {
  SHADER_COMPILE ?= 0 ;
}

# /ShaderObject object : source : defs ;
#
# Compile s a single _source_ file into _object_. The @Main and @Library
# rules use it to compile sources.
#
# Causes _source_ to be scanned for #include directives and calls @HdrRule
# to make all included files dependencies of _object_.
#
# Calls one of the following rules depending on the suffix to do the
# actual compilation.
#
rule shaderObject
{
  local COMPILE_AS = $(>:S) ;
  if $(SHADER_COMPILE) = 0 {
    if ! [ FExists $(<) ] {
      EXIT "F/Shader '$(<)' can't be found & no shader compiler. Use SHADER_COMPILE=1 to force enable the shader compiler." ;
    }
    return $(<) ;
  }

  Clean clean : $(<) ;
  SEARCH on $(>) = $(SEARCH_SOURCE) ;
  switch $(COMPILE_AS) {
    case .metal : HDRS on $(<) = $(SHADER_METAL_HDRS) ;
    case .cgc : HDRS on $(<) = $(SHADER_CGC1_HDRS) ;
    case .glsl : HDRS on $(<) = $(SHADER_GLSL_HDRS) ;
  }

  if $(SHADER_HDRS_DEPS) = 1 {
    HDRRULE on $(>) = HdrRule ;
    HDRSCAN on $(>) = $(HDRPATTERN) ;
    HDRGRIST on $(>) = $(HDRGRIST) ;
    HDRSEARCH on $(>) = $(SEARCH_SOURCE:E) $(SUBDIRHDRS) [ VarOnGet HDRS : $(<) ]  ;
  }

  # propagate target specific-defines
  SHADER_DEFINES on $(<) += $(SHADER_DEFINES) ;
  SHADER_DEFINES on $(<) += $(3) ;

  switch $(COMPILE_AS) {
    case .metal : shaderMetal $(<) : $(>) ;
    case .cgc : shaderCgc1 $(<) : $(>) ;
    case .glsl : shaderGlsl $(<) : $(>) ;
    case * : shaderUserObject $(<) : $(>) ;
  }

  MakeDirForTarget $(<) : $(<:D) ;
  DEPENDS shaders : $(<) ;
  return $(<) ;
}

# Return the suffix of the specified source file
rule FShaderTargetSuffix
{
  switch $(<:S) {
    case .metal : return .air ;
    case .cgc : return .cgo ;
    case .glsl : return .nish ;
    case * : EXIT "E/Unknown suffix for:" $(<) ;
  }
  return $(<:S) ;
}

# /shaderObjectSuf SOURCE
#
# Call the Object rule with the appropriate suffix, returns the name of the
# target.
rule shaderObjectSuf
{
  local suf = [ FShaderTargetSuffix $(<) ] ;
  local d = $(<:S=$(suf)) ;
  switch $(suf) {
    case * :
      shaderObject $(d) : $(_i) ;
  }
  return $(d) ;
}

# /shaderObjects sources ;
rule shaderObjects
{
  local _i ;
  local r ;

  for _i in [ FGristFiles $(<) ] {
    r += [ shaderObjectSuf $(_i) ] ;
  }

  return $(r) ;
}

#----------------------------------------------------------------------
#     CGC
#----------------------------------------------------------------------
rule shaderCgc1
{
  Depends $(<) : $(>) ;
  local OUTNAME = $(<:B) ;
  local PROFILE ;
  if [ Match "(.*_vs)|(vs_.*)|(.*_vs_.*)" : $(OUTNAME) ] {
    PROFILE = "hlsl_vs_3_0" ;
  }
  else if [ Match "(.*_ps)|(ps_.*)|(.*_ps_.*)" : $(OUTNAME) ] {
    PROFILE = "hlsl_ps_3_0" ;
  }
  else {
    EXIT "E/Can't determin the shader profile of:" $(<) ;
  }

  SHADER_PROFILE on $(<) += $(PROFILE) ;
  SHADER_NAME on $(<) += $(OUTNAME) ;
  SHADER_CGC1_FLAGS on $(<) += $(SHADER_CGC1_FLAGS) ;
  SHADER_CGC1_HDRS on $(<) += [ on $(<) FIncludesDash [ FQuote $(SHADER_CGC1_HDRS) ] ] ;
  SHADER_CGC1_DEFS on $(<) += [ on $(<) FDefines $(SHADER_DEFINES) $(SHADER_CGC1_DEFINES) ] ;
}

if $(SHADER_NICGC_SERVER) {
  actions shaderCgc1
  {
    SRC_PP="$(<:S=.pp.txt)"
    set -e
    # Preprocess the shader
    $(NICPP_EXE) -D$(SHADER_PROFILE)=1 $(SHADER_CGC1_DEFS) $(SHADER_CGC1_HDRS) "$(>)" "${SRC_PP}"
    # Compile the preprocessed shader
    $(NICGC_EXE) -S "$(SHADER_NICGC_SERVER)" $(SHADER_CGC1_FLAGS) $(SHADER_CGC1_DEFS) $(SHADER_CGC1_HDRS) $(SHADER_PROFILE) $(SHADER_NAME) "${SRC_PP}" "$(<)"
    # Cleanup temps
    rm -f "${SRC_PP}"
  }
}
else {
  actions shaderCgc1
  {
    $(NICGC_EXE) $(SHADER_CGC1_FLAGS) $(SHADER_CGC1_DEFS) $(SHADER_CGC1_HDRS) $(SHADER_PROFILE) $(SHADER_NAME) "$(>)" "$(<)"
  }
}

#----------------------------------------------------------------------
#     GLSL
#----------------------------------------------------------------------
rule shaderGlsl
{
  Depends $(<) : $(>) ;
  local OUTNAME = $(<:B) ;
  local PROFILE = "default" ;
  local TARGETS = "hlsl3,metal1,es2,gl2" ;
  local STAGE ;
  if [ Match "(.*_vs)|(vs_.*)|(.*_vs_.*)" : $(OUTNAME) ] {
    STAGE = "vertex" ;
  }
  else if [ Match "(.*_ps)|(ps_.*)|(.*_ps_.*)" : $(OUTNAME) ] {
    STAGE = "pixel" ;
  }
  else {
    EXIT "E/Can't determin the shader profile of:" $(<) ;
  }

  SHADER_STAGE on $(<) += $(STAGE) ;
  SHADER_PROFILE on $(<) += $(PROFILE) ;
  SHADER_TARGETS on $(<) += $(TARGETS) ;
  SHADER_NAME on $(<) += $(OUTNAME) ;
  SHADER_GLSL_FLAGS on $(<) += $(SHADER_GLSL_FLAGS) ;
  SHADER_GLSL_HDRS on $(<) += [ on $(<) FIncludesDash [ FQuote $(SHADER_GLSL_HDRS) ] ] ;
  SHADER_GLSL_DEFS on $(<) += [ on $(<) FDefines $(SHADER_DEFINES) $(SHADER_GLSL_DEFINES) ] ;
  # ECHO "... shaderGlsl:" $(>) "->" $(<) ":" $(OUTNAME) ":" $(STAGE) ;
}

actions shaderGlsl
{
  $(NISH_EXE) @nish $(SHADER_GLSL_FLAGS) $(SHADER_GLSL_DEFS) $(SHADER_GLSL_HDRS) -x $(SHADER_STAGE) -p $(SHADER_PROFILE) -t $(SHADER_TARGETS) -n $(SHADER_NAME) "$(>)" "$(<)"
}

#----------------------------------------------------------------------
#     METAL
#----------------------------------------------------------------------
if $(OSX) = 1 || $(IOSMAC) = 1 {

  XCODE_PLATFORMS_DIR ?= /Applications/Xcode.app/Contents/Developer/Platforms/ ;
  if ! [ FExists $(XCODE_PLATFORMS_DIR) ] {
    ECHO "E/Can't find XCODE_PLATFORMS_DIR, if its not in the standard location you can set the XCODE_PLATFORMS_DIR environment variable to specify its location." ;
    EXIT "E/XCODE_PLATFORMS_DIR =" $(XCODE_PLATFORMS_DIR) ;
  }

  XCODE_IOS_PLATFORM_USR_BIN_DIR ?= [ FDirName $(XCODE_PLATFORMS_DIR) iPhoneOS.platform usr bin ] ;
  if ! [ FExists $(XCODE_IOS_PLATFORM_USR_BIN_DIR) ] {
    ECHO "E/Can't find XCODE_IOS_PLATFORM_USR_BIN_DIR, if its not in the standard location you can set the XCODE_IOS_PLATFORM_USR_BIN_DIR environment variable to specify its location." ;
    EXIT "E/XCODE_IOS_PLATFORM_USR_BIN_DIR =" $(XCODE_IOS_PLATFORM_USR_BIN_DIR) ;
  }

  XCODE_MACOS_PLATFORM_USR_BIN_DIR ?= [ FDirName $(XCODE_PLATFORMS_DIR) MacOSX.platform usr bin ] ;
  if ! [ FExists $(XCODE_MACOS_PLATFORM_USR_BIN_DIR) ] {
    XCODE_MACOS_PLATFORM_USR_BIN_DIR = [ FDirName $(XCODE_PLATFORMS_DIR) .. Toolchains XcodeDefault.xctoolchain usr bin ] ;
    if ! [ FExists $(XCODE_MACOS_PLATFORM_USR_BIN_DIR) ] {
      ECHO "E/Can't find XCODE_MACOS_PLATFORM_USR_BIN_DIR, if its not in the standard location you can set the XCODE_MACOS_PLATFORM_USR_BIN_DIR environment variable to specify its location." ;
      EXIT "E/XCODE_MACOS_PLATFORM_USR_BIN_DIR =" $(XCODE_MACOS_PLATFORM_USR_BIN_DIR) ;
    }
  }

  # metal compiler
  rule shaderMetal
  {
    Depends $(<) : $(>) ;
    SHADER_METAL_FLAGS on $(<) += $(SHADER_METAL_FLAGS) ;
    SHADER_METAL_HDRS on $(<) = [ on $(<) FIncludes $(SHADER_METAL_HDRS) ] ;
    SHADER_METAL_DEFS on $(<) = [ on $(<) FDefines $(SHADER_METAL_DEFINES) ] ;
  }

  # /shaderMetalLibraryFromObjects library : objects ;
  rule shaderMetalLibraryFromObjects
  {
    local _i _l _s _h ;

    # Add grist to file names
    _s = [ FGristFiles $(>) ] ;
    _l = $(<:S=.metallib) ;
    _h = $(<:S=.metallib.h) ;

    # Set LOCATE for the library and its contents.  The bound
    # value shows up as $(NEEDLIBS) on the Link actions.
    # For compatibility, we only do this if the library doesn't
    # already have a path.
    if ! $(_l:D) {
      MakeLocate $(_l) $(_l)($(_s:BS)) : $(LOCATE_TARGET) ;
    }

    Depends $(_l) : $(_s) ;
    Depends $(_h) : $(_l) ;
    Clean clean : $(_l) ;

    shaderMetalArchive $(_l) : $(_s) ;
  }

  actions shaderMetal
  {
    $(SHADER_METAL_SDK)/metal $(SHADER_METAL_FLAGS) $(SHADER_METAL_DEFS) $(SHADER_METAL_HDRS) "$(>)" -o "$(<)"
  }

  actions shaderMetalDiag
  {
    $(SHADER_METAL_SDK)/metal $(SHADER_METAL_FLAGS) $(SHADER_METAL_DEFS) $(SHADER_METAL_HDRS) -serialize-diagnostics "$(<).dia" "$(>)" -o "$(<)"
  }

  actions shaderMetalArchive
  {
    $(SHADER_METAL_SDK)/metallib -o "$(<)" "$(>)" && \
    bin2h "$(<)" "$(<).h" $(LIB_METAL_BIN2H_NAME)
  }

  # /shaderLibrary library : sources : objs ;
  rule shaderMetalLibrary
  {
    if ! [ ListGetFirst $(>) ] {
      EXIT "E/shaderMetalLibrary no sources specified!" ;
    }

    local target_sdk target_name target_ccflags ;
    if $(OSX) || $(IOSMAC) {
      target_sdk = $(XCODE_MACOS_PLATFORM_USR_BIN_DIR) ;
      target_name = osx ;
      target_ccflags = -arch air64 -emit-llvm -c -ffast-math -std=osx-metal1.1 -mmacosx-version-min=10.11 ;
    }
    else if $(OSPLAT) = IOS {
      target_sdk = $(XCODE_IOS_PLATFORM_USR_BIN_DIR) ;
      target_name = ios ;
      target_ccflags = -arch air64 -emit-llvm -c -ffast-math -std=ios-metal1.0 -mios-version-min=10.0 ;
    }
    else {
      EXIT "E/Building metal libraries requires macOS." ;
    }

    local SRC_METAL = $(>) ;

    local LIB_METAL = [ FGristFiles $(<).$(target_name).metallib ] ;
    LIB_METAL_BIN2H_NAME on $(LIB_METAL) += $(<:B) ;

    local OBJ_METAL = [ shaderObjects $(>) ] ;
    SHADER_CCFLAGS on $(OBJ_METAL) += -Wall -Wextra $(target_ccflags) ;

    SHADER_METAL_SDK on $(LIB_METAL) += $(target_sdk) ;
    SHADER_METAL_SDK on $(OBJ_METAL) += $(target_sdk) ;

    shaderMetalLibraryFromObjects $(LIB_METAL) : $(OBJ_METAL) ;
    DEPENDS shaders : $(LIB_METAL).h ;
    DEPENDS pass1 : shaders ;

    return $(LIB_METAL) ;
  }

}
