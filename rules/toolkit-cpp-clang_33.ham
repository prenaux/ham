if $(BUILD) = da {
  # Build with the sanitizer in debug mode
  CLANG_SANITIZE ?= 1 ;
}

STRICT_ALIASING_FLAGS = -fno-strict-aliasing ;

CLANG_CC_ARGS +=
  -fdiagnostics-absolute-paths
  -fvisibility=hidden
  -ffunction-sections
  -fdata-sections
  -fvisibility=hidden
  -Wno-return-type-c-linkage
  -Wno-switch
  -Wno-#pragma-messages
  -Wno-unused-value
  -Wno-unknown-warning-option
;
if $(LINUX) {
  CLANG_CPP_ARGS +=
    -stdlib=libstdc++
  ;
}
else if $(WINDOWS) {
  # Only one stdlib on Windows...
  CLANG_CPP_ARGS += ;
}
else {
  CLANG_CPP_ARGS +=
    -stdlib=libc++
  ;
}
CLANG_CPP_ARGS +=
  -std=$(C++VERSION)
  -Werror=c++11-narrowing
;

if $(C++VERSION) >= 20 {
  CLANG_CPP_ARGS +=
    -Wno-ambiguous-reversed-operator
    # Spits out an absurd amount of pointless pedantic warnings
    -Wno-deprecated-builtins
  ;
}

if $(FLYMAKE) = 1 {
  # Happens when we're compiling header files with flymake since the temporary
  # flymake file is a cpp file.
  CLANG_CC_ARGS +=
    -Wno-pragma-once-outside-header
  ;
}

# TODO: This should be under Lint?
if $(CLANG_ANALYZER) = 1 {
  CLANG_CC_ARGS += -DCLANG_ANALYZER=1 --analyze ;
  ECHO "I/Building with Clang's static analyzer" ;
}
if $(CLANG_SANITIZE) = 1 {
  CLANG_CC_ARGS += -DCLANG_SANITIZE=1 -fsanitize=address ;
  ECHO "I/Building with -fsanitize=address" ;
}

# Clang 15 removes std::unary_function. This macro puts it back... for now.
CLANG_CC_ARGS +=
  -D_LIBCPP_ENABLE_CXX17_REMOVED_UNARY_BINARY_FUNCTION
;

CLANG_CC_ARGS +=
  -Wno-deprecated-declarations
  -Wno-gnu-inline-cpp-without-extern
  # TODO: Remove this, this is actually a very useful warning.
  -Wno-inconsistent-missing-override
;

if $(LINUX) {
  CLANG_CC_ARGS +=
    -fPIC
    -Wno-address-of-packed-member
  ;
  CLANG_CPP_ARGS +=
    -Wno-conversion-null
  ;

  LINKLIBS +=
    -lstdc++ -lpthread -ldl -lm
  ;

  if $(CLANG_SANITIZE) = 1 {
    LINKFLAGS +=
      # NOTE: We have to allow undefined symbols when using ASAN :(
      # -Wl,--no-allow-shlib-undefined -Wl,--no-undefined
    ;
  }
  else {
    LINKFLAGS += -Wl,--no-allow-shlib-undefined -Wl,--no-undefined ;
  }
}

### OSX ###
else if $(OSX) {
  CLANG_CC_ARGS += -fobjc-arc ;

  CLANG_CC_ARGS += -mmacosx-version-min=$(MACOSX_MINVER) -fno-common ;
  if $(OSPLAT) = X64 {
    CLANG_CC_ARGS += -arch x86_64 -m64 ;
    LINKFLAGS += -arch x86_64 -m64 ;
  }
  else if $(OSPLAT) = X86 {
    CLANG_CC_ARGS += -arch i386 -m32 ;
    LINKFLAGS += -arch i386 -m32 ;
  }

  # Strip all symbols in release build
  #
  # -dead_strip
  # Remove functions and data that are unreachable by the entry point or
  # exported symbols.
  #
  # -dead_strip_dylibs
  #
  # Remove dylibs that are unreachable by the entry point or exported
  # symbols. That is, suppresses the generation of load command commands for
  # dylibs which supplied no symbols during the link. This option should not be
  # used when linking against a dylib which is required at runtime for some
  # indirect reason such as the dylib has an important initializer.
  #
  # -why_live symbol_name
  #
  # Logs a chain of references to symbol_name. Only applicable with
  # -dead_strip. It can help debug why something that you think should be dead
  # strip removed is not removed.
  #
  if $(BUILD) = ra {
    LINKFLAGS_EXE += -dead_strip ;
    LINKFLAGS_DLL += -dead_strip ;
  }
  LINKLIBS +=
  -framework Foundation
  -framework CoreServices
  -framework AudioUnit
  -framework CoreAudio
  -framework Cocoa
  -framework IOKit
  -framework OpenGL
  -framework AGL
  -framework Metal
  -framework MetalKit
  -framework QuartzCore
  -framework Security
  -lpthread -ldl ;
}

CCFLAGS   += $(CLANG_CC_ARGS) ;
C++FLAGS  += $(CLANG_CC_ARGS) $(CLANG_CPP_ARGS) ;

if $(FLYMAKE) = 1 {
  CLANG_DBG_ARGS = -O0 $(STRICT_ALIASING_FLAGS) ;
  # CLANG_DBG_ARGS = -ggdb -O0 $(STRICT_ALIASING_FLAGS) ;
  CLANG_OPT_ARGS = $(CLANG_DBG_ARGS) ;
}
else {
  ### "Debug" (da) build flags ###
  CLANG_DBG_ARGS = -ggdb $(STRICT_ALIASING_FLAGS) ;
  ### Optimized (ra) build flags ###
  CLANG_OPT_ARGS = -ggdb -O2 $(STRICT_ALIASING_FLAGS) ;
}

### Link flags ###
if $(CLANG_SANITIZE) = 1 {
  LINKFLAGS += -fsanitize=address ;
}
LINKLIBS += ;

rule tkCC++Build
{
  local t = $(<) ;
  local strOpt = "" ;
  # Set the debug infos generation
  # Set the optimization flags
  if $(DEBUG) = 1 {
    PKGOPTIM += $(CLANG_DBG_ARGS) ;
    strOpt += "(DebugOnly) " ;
  }
  # Set debug-only flags
  else {
    PKGOPTIM += $(CLANG_OPT_ARGS) ;
    strOpt += "(Optimized) " ;
  }
  logVerbose "- CC++Build: " $(strOpt) ;
}

rule tkC++Exceptions {
  ObjectC++Flags $(<) : -fexceptions ;
}
rule tkNoC++Exceptions {
  ObjectC++Flags $(<) : -fno-exceptions ;
}

rule tkC++RTTI {
  ObjectC++Flags $(<) : -frtti ;
}
rule tkNoC++RTTI {
  ObjectC++Flags $(<) : -fno-rtti ;
}

rule tkCC++Lint {
}
