if $(BUILD) = da {
  # We don't build with the sanitizer by default in debug mode for webassembly
  # as the slowdown and memory usage spikes make the output borderline unusable.
  # CLANG_SANITIZE ?= 1 ;
}

STRICT_ALIASING_FLAGS = -fno-strict-aliasing ;

TEMPDIR_JSCC = [ FDirName $(TEMPDIR) jscc ] ;
MakeLocate tkdir : $(TEMPDIR_JSCC) ;

JSCC_WARN_ARGS =
-Wall
-Wno-switch
-Wno-unknown-pragmas
-Wno-trigraphs
-Wno-narrowing
-Wno-sign-compare
# -Wno-warn-absolute-paths
-Wno-unused-value
-Wno-unused-variable
-Wno-unused-function
-Wno-deprecated-builtins
-Wno-deprecated-declarations
-Werror=return-stack-address
-Wno-deprecated-enum-enum-conversion
;
if $(LOA_LINKER) = clang || $(LOA_LINKER) = em {
  JSCC_WARN_ARGS +=
  -Wno-reorder
  -Wno-return-type-c-linkage
  -Wno-char-subscripts
  -Dgnu_scanf=scanf
  -Dgnu_printf=printf
  ;
}
# Clang 3.7
JSCC_WARN_ARGS +=
  -Wno-inconsistent-missing-override
  -Wno-unused-local-typedef
;
if $(FLYMAKE) = 1 {
  JSCC_WARN_ARGS += -Wno-\#pragma-messages ;
}

CCFLAGS += $(JSCC_WARN_ARGS) ;
C++FLAGS += $(JSCC_WARN_ARGS) ;

SUFPCH = .h.gch ;

C++FLAGS +=
  # --memory-init-file 0
  -std=$(C++VERSION)
;

EMSCRIPTEN_COMPILATION_SETTINGS = ;

if $(CLANG_ANALYZER) = 1 {
  EMSCRIPTEN_COMPILATION_SETTINGS += -DCLANG_ANALYZER=1 --analyze ;
  ECHO "I/Building with Clang's static analyzer" ;
}
if $(CLANG_SANITIZE) = 1 {
  EMSCRIPTEN_COMPILATION_SETTINGS += -DCLANG_SANITIZE=1 -fsanitize=address -fsanitize=undefined ;
  ECHO "I/Building with -fsanitize=address" ;
}

EMSCRIPTEN_LINKER_SETTINGS =
  -s MINIFY_HTML=0
  # ALLOW_MEMORY_GROWTH is documented as being efficient in wasm, so we enable
  # it since we only target wasm
  -s ALLOW_MEMORY_GROWTH=1
  # Great on paper, but its implemented by just lowercasing everything which
  # is not good enough...
  # -s CASE_INSENSITIVE_FS=1
  -s WEBGL2_BACKWARDS_COMPATIBILITY_EMULATION=1
;

### "Debug" (da) build flags ###
JSCC_DBG_ARGS = $(STRICT_ALIASING_FLAGS) ;
# we use -g2 by default, -g3 # Allows source level debugging in Chrome but creates huge WASM
JSCC_DBG_ARGS += -O1 -g2 $(EMSCRIPTEN_COMPILATION_SETTINGS) ;

### Optimized (ra) build flags ###
JSCC_OPT_ARGS = $(STRICT_ALIASING_FLAGS) ;
JSCC_OPT_ARGS += -O2 $(EMSCRIPTEN_COMPILATION_SETTINGS) ;

### Link flags ###
LINKFLAGS += $(EMSCRIPTEN_LINKER_SETTINGS) ;
if $(DEBUG) = 1 {
  LINKFLAGS += $(JSCC_DBG_ARGS)
    -sASSERTIONS=1
    -sERROR_ON_WASM_CHANGES_AFTER_LINK
    -sDEMANGLE_SUPPORT=1
    -sWASM_BIGINT
    # -sSAFE_HEAP=1 # Incompatible with ERROR_ON_WASM_CHANGES_AFTER_LINK
  ;
}
else {
  LINKFLAGS += $(JSCC_OPT_ARGS) ;
}
# ECHO "# JSCC (Web) Link Flags :" $(LINKFLAGS) ;

rule tkCC++Build
{
  local t = $(<) ;
  local strOpt = "" ;
  # Set the debug infos generation
  # Set the optimization flags
  if $(DEBUG) = 1 {
    PKGOPTIM += $(JSCC_DBG_ARGS) ;
    strOpt += "(DebugOnly) " ;
  }
  # Set debug-only flags
  else {
    PKGOPTIM += $(JSCC_OPT_ARGS) ;
    strOpt += "(Optimized) " ;
  }
  logVerbose "- CC++Build: " $(strOpt) ;
}

rule tkC++Exceptions {
  # See https://emscripten.org/docs/porting/exceptions.html
  ObjectC++Flags $(<) :
    -fexceptions
    -s DISABLE_EXCEPTION_CATCHING=0
    -s NO_DISABLE_EXCEPTION_CATCHING=1
    # This is more performant than NO_DISABLE_EXCEPTION_CATCHING
    # -sEXCEPTION_CATCHING_ALLOWED=[main]
  ;
}
rule tkNoC++Exceptions {
  ObjectC++Flags $(<) : -fno-exceptions ;
}

rule tkC++RTTI {
  ObjectC++Flags $(<) : -frtti ;
}
rule tkNoC++RTTI {
  ObjectC++Flags $(<) : -fno-rtti ;
}

rule tkCC++Lint {
}
