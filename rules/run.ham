RUN_DIR ?= . ;
RUN_SYMBOLS_DIR ?= . ;
RUN_EXE_SUFFIX ?= $(SUFEXE) ;

NOTFILE runnable;
NOTFILE debuggable;
DEPENDS runnable : debuggable ;

# runInDebugger_ TARGET : WHAT/EXE : INDIR/EXEDIR : PARAMS
rule runInDebugger_ {
  if $(3) {
    WORK_DIR on $(<) = $(3) ;
  }
  else {
    WORK_DIR on $(<) = $(RUN_DIR) ;
  }
  RUN_EXE on $(<) = [ FDirName $(RUN_DIR) $(>)$(RUN_EXE_SUFFIX) ] ;
  A10 on $(<) = $(4) ;
  DEPENDS $(<) : $(>) ;
  DEPENDS debuggable : $(<) ;
}

# runInDebugger TARGET : WHAT/EXE : INDIR/EXEDIR : PARAMS ;
rule runInDebugger {
  local t = Debug_$(<) ;
  runInDebugger_ $(t) : $(<) : $(2) : $(3) : $(4) ;
  return $(t) ;
}

# runInDir_ TARGET : WHAT/EXE : INDIR/EXEDIR : PARAMS
rule runInDir_ {
  if $(3) {
    WORK_DIR on $(<) = $(3) ;
  }
  else {
    WORK_DIR on $(<) = $(RUN_DIR) ;
  }
  RUN_EXE on $(<) = [ FDirName $(RUN_DIR) $(>)$(RUN_EXE_SUFFIX) ] ;
  A10 on $(<) = $(4) ;
  DEPENDS $(<) : $(>) ;
  DEPENDS runnable : $(<) ;
}

# runInDir TARGET : WHAT/EXE : INDIR/EXEDIR : PARAMS ;
rule runInDir {
  local t = Run_$(<) ;
  runInDir_ $(t) : $(<) : $(2) : $(3) : $(4) ;
  runInDebugger $(<) : $(2) : $(3) ;
  return $(t) ;
}

if $(RUN_IMPORT) {
  Import run-$(RUN_IMPORT).ham ;
  # If RUN_IMPORT is specified we assume by default that we can run executables...
  TARGET_FEATURE_RUN_EXE ?= 1 ;
}
else {
  if $(BUILD_BIN_LOA) = $(BIN_LOA) {
    # Unless specified otherwise we can run binaries that have the same host and
    # target cpu architecture
    TARGET_FEATURE_RUN_EXE ?= 1 ;
    Import run-$(OS)-$(TARGET_OS).ham ;
  }
  else {
    # Unless specified otherwise we cant run binaries that have different host
    # and target cpu architecture
    TARGET_FEATURE_RUN_EXE ?= 0 ;
    Import run-warning.ham ;
  }
}

# ECHO "... BUILD_BIN_LOA:" $(BUILD_BIN_LOA) ;
# ECHO "... BIN_LOA:" $(BIN_LOA) ;
# ECHO "... TARGET_FEATURE_RUN_EXE:" $(TARGET_FEATURE_RUN_EXE) ;
