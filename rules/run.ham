RUN_DIR ?= . ;
RUN_SYMBOLS_DIR ?= . ;
RUN_EXE_SUFFIX ?= $(SUFEXE) ;

# ECHO "... BUILD_BIN_LOA:" $(BUILD_BIN_LOA) ;
# ECHO "... BIN_LOA:" $(BIN_LOA) ;
# ECHO "... TARGET_FEATURE_RUN_EXE:" $(TARGET_FEATURE_RUN_EXE) ;

NOTFILE runnable;
NOTFILE debuggable;
DEPENDS runnable : debuggable ;

# runInDebugger_ TARGET : WHAT/EXE : INDIR/EXEDIR : PARAMS
rule runInDebugger_ {
  if $(3) {
    WORK_DIR on $(<) = $(3) ;
  }
  else {
    WORK_DIR on $(<) = $(RUN_DIR) ;
  }
  RUN_EXE on $(<) = [ FDirName $(RUN_DIR) $(>)$(RUN_EXE_SUFFIX) ] ;
  A10 on $(<) = $(4) ;
  DEPENDS $(<) : $(>) ;
  DEPENDS debuggable : $(<) ;
}

# runInDebugger TARGET : WHAT/EXE : INDIR/EXEDIR : PARAMS ;
rule runInDebugger {
  local t = Debug_$(<) ;
  runInDebugger_ $(t) : $(<) : $(2) : $(3) : $(4) ;
  return $(t) ;
}

# runInDir_ TARGET : WHAT/EXE : INDIR/EXEDIR : PARAMS
rule runInDir_ {
  if $(3) {
    WORK_DIR on $(<) = $(3) ;
  }
  else {
    WORK_DIR on $(<) = $(RUN_DIR) ;
  }
  RUN_EXE on $(<) = [ FDirName $(RUN_DIR) $(>)$(RUN_EXE_SUFFIX) ] ;
  A10 on $(<) = $(4) ;
  DEPENDS $(<) : $(>) ;
  DEPENDS runnable : $(<) ;
}

# runInDir TARGET : WHAT/EXE : INDIR/EXEDIR : PARAMS ;
rule runInDir {
  local t = Run_$(<) ;
  runInDir_ $(t) : $(<) : $(2) : $(3) : $(4) ;
  runInDebugger $(<) : $(2) : $(3) ;
  return $(t) ;
}

if $(RUN_IMPORT) {
  Import run-$(RUN_IMPORT).ham ;
  # If RUN_IMPORT is specified we assume by default that we can run executables...
  TARGET_FEATURE_RUN_EXE ?= 1 ;
}
else {
  if $(BUILD_BIN_LOA) = $(BIN_LOA) {
    # Unless specified otherwise we can run binaries that have the same host and
    # target cpu architecture
    TARGET_FEATURE_RUN_EXE ?= 1 ;
    Import run-ham-gdb.ham ;
  }
  else {
    # Unless specified otherwise we cant run binaries that have different host
    # and target cpu architecture
    TARGET_FEATURE_RUN_EXE ?= 0 ;
    Import run-warning.ham ;
  }
}

# Run a build script.
# ushRun TARGET : SCRIPT_NAME : INPUT_DEPS : ARTIFACTS ;
rule ushRunBashScript {
  local target = $(1) ;
  local scriptPath = [ FGristFiles [ AssertFExists ushRunBashScript_$(target) : $(2) ] ] ;
  local inputDeps = $(3) ;
  local artifacts = $(4) ;
  DEPENDS $(target) : $(scriptPath) ;
  if $(inputDeps) {
    DEPENDS $(target) : $(inputDeps) ;
  }
  if $(artifacts) {
    DEPENDS $(artifacts) : $(target) ;
  }
  else {
    NOTFILE $(target) ;
    ALWAYS $(target) ;
  }
  ushRun1 $(target) : $(scriptPath) ;
  DEPENDS ush : $(target) ;
}

actions ushRun1 {
  # set -e
  . "$HAM_HOME/bin/ham-bash-lib.sh"
  SCRIPT_PATH=`abspath "$(>)"`
  SCRIPT_DIR=`dirname "${SCRIPT_PATH}"`
  # log_info "... ushRun1: $(<) : ${SCRIPT_PATH}"
  cd "${SCRIPT_DIR}"
  "${SCRIPT_PATH}"
}

# Run a underscore script in the current subdir
rule ushRun {
  local target = ush_$(1) ;
  local scriptName = [ FDirName $(SUBDIR) _$(1).sh ] ;
  ushRunBashScript $(target) : $(scriptName) ;
  return $(target) ;
}

# Run the standard script
# ushScripts TARGET : SCRIPT_LIST ?? lint fix run_ci
rule ushScripts {
  local moduleTarget = $(1) ;
  local scriptList = $(2) ;
  if ! $(scriptList) {
    scriptList = lint fix run_ci ;
  }
  for script in $(scriptList) {
    local scriptTarget = ush_$(script)_$(moduleTarget) ;
    local scriptName = [ FDirName $(SUBDIR) _$(script).sh ] ;
    ushRunBashScript $(scriptTarget) : $(scriptName) ;
    DEPENDS ush_$(script) : $(scriptTarget) ;
    if $(target) {
      DEPENDS $(target) : $(scriptTarget) ;
    }
  }
}
