IOS = 1 ;
OSPLAT = IOS ;

Import base-GCC.ham ;

CC = clang ;
C++ = clang++ ;
LINK = ld ;

# Define here the CPU instruction set to use (armv6, armv7, armv7f, armv7s or arm64)
# The armv6 instruction set is used in old devices, prior to the iPhone 3GS.
# The armv7 set extends the armv6 and is used in all modern iOS devices.
# The armv7f set adds dual-core instructions to armv7 for Apple A5 devices.
# The armv7s set adds integer division optimizations for Apple A6 devices.
# The arm64 set is for the A7, A8 and A8X devices, 64bit CPUs.
IOS_ARCH ?= $(TARGET_OSPLAT) ;
switch $(IOS_ARCH:L) {
  case armv6 :
    IOS_ARCH = $(IOS_ARCH:U) ;
  case armv7 :
    IOS_ARCH = $(IOS_ARCH:U) ;
  case armv7f :
    IOS_ARCH = $(IOS_ARCH:U) ;
  case armv7s :
    IOS_ARCH = $(IOS_ARCH:U) ;
  case arm64 :
    IOS_ARCH = $(IOS_ARCH:U) ;
  case x64 :
    IOS_ARCH = X86_64 ;
  case x86_64 :
    IOS_ARCH = $(IOS_ARCH:U) ;
  case * :
    EXIT "E/Unknown IOS_ARCH: '$(IOS_ARCH)'. Should be armv6, armv7, armv7f, armv7s or arm64." ;
}

# Define here the minimal iOS version's MAJOR number (iOS3, iOS4 or iOS5)
IOS_MINVER ?= 11 ;

switch $(IOS_MINVER) {
  case 11 :
    IOS_FRAMEWORKS = -framework Accelerate -framework Accounts  -framework AdSupport -framework AssetsLibrary  -framework AVFoundation -framework CFNetwork -framework CoreAudio -framework CoreBluetooth -framework CoreData -framework CoreFoundation -framework CoreGraphics -framework CoreImage -framework CoreLocation -framework CoreMedia -framework CoreMIDI -framework CoreMotion -framework CoreTelephony -framework CoreText -framework CoreVideo -framework EventKit -framework EventKitUI -framework ExternalAccessory -framework Foundation -framework GameKit -framework GLKit -framework GSS -framework iAd -framework ImageIO -framework IOKit -framework MapKit -framework MediaPlayer -framework MediaToolbox -framework MessageUI -framework MobileCoreServices -framework NewsstandKit -framework OpenGLES -framework PassKit -framework QuartzCore -framework QuickLook -framework Security -framework Social -framework StoreKit -framework SystemConfiguration -framework Twitter -framework UIKit -framework VideoToolbox ;

  case * :
    EXIT "E/Unknown iOS version." ;
}

if $(NT) {
  IPHONE_SDK_DIR = [ FDirName $(IOS_DIR) SDK ] ;
  if ! $(IPHONE_SDK_DIR) || ! [ FExists $(IPHONE_SDK_DIR) ] {
    EXIT "Can't find IPHONE_SDK_DIR:" $(IPHONE_SDK_DIR) ;
  }

  CLANG_BASE_FLAGS =
    -target $(IOS_ARCH:L)-apple-ios$(IOS_MINVER).0
    -integrated-as
    -fdiagnostics-format=msvc
    --sysroot "\"$(IPHONE_SDK_DIR)\""
    -I"\"$(IPHONE_SDK_DIR)/lib/c++/v1\""
    -fconstant-cfstrings
    -DIPHONE
    -D__CPU_$(IOS_ARCH)__
    -D__IPHONE_OS_VERSION_MIN_REQUIRED=$(IOS_MINVER)0000
  ;
  if ! ( $(IOS_ARCH:L) = arm64 ) {
    CLANG_BASE_FLAGS += -mno-thumb ;
  }
}
else {
  if $(IOS_ARCH) = X86_64 {
    if $(IOSMAC_SDK_DIR) {
      IPHONE_SDK_DIR = $(IOSMAC_SDK_DIR) ;
    }
    else {
      IPHONE_SDK_DIR = /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/ ;
    }
    IOSMAC = 1 ;

    CLANG_BASE_FLAGS =
    -target x86_64-apple-ios13.0-macabi
    --sysroot "\"$(IPHONE_SDK_DIR)\""
    -fdiagnostics-format=msvc
    -iframework /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/System/iOSSupport/System/Library/Frameworks
    -stdlib=libc++
    -I"\"$(IPHONE_SDK_DIR)/lib/c++/v1\""
    -fconstant-cfstrings
    -DIPHONE
    -DIOSMAC
    -D__CPU_$(IOS_ARCH)__
    -D__IPHONE_OS_VERSION_MIN_REQUIRED=$(IOS_MINVER)0000
    -Wno-deprecated-declarations
    ;
  }
  else {
    if $(IPHONE_SDK_BASE_DIR) {
      IPHONE_SDK_DIR = $(IPHONE_SDK_BASE_DIR)/iPhoneOS.sdk ;
    }
    else {
      IPHONE_SDK_DIR = /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk ;
    }
    if ! [ FExists $(IPHONE_SDK_DIR) ] {
      ECHO "E/Can't find IPHONE_SDK_DIR, if its not in the standard location you can set the IPHONE_SDK_BASE_DIR environment variable to specify its location." ;
      EXIT "E/IPHONE_SDK_DIR =" $(IPHONE_SDK_DIR) ;
    }

    CLANG_BASE_FLAGS =
    -arch $(IOS_ARCH:L)
    -fconstant-cfstrings
    -miphoneos-version-min=$(IOS_MINVER).0.0
    -DIPHONE
    -D__CPU_$(IOS_ARCH)__
    -D__IPHONE_OS_VERSION_MIN_REQUIRED=$(IOS_MINVER)0000
    -isysroot "\"$(IPHONE_SDK_DIR)\""
    -fmessage-length=0
    ;

  }
}

if ! [ FExists $(IPHONE_SDK_DIR) ] {
  EXIT "Can't find iPhoneSDK dir:" $(IPHONE_SDK_DIR) ;
}
else {
  ECHO "I/IPHONE_SDK_DIR:" $(IPHONE_SDK_DIR) ;
}

CCFLAGS = $(CLANG_BASE_FLAGS) ;
C++FLAGS = $(CLANG_BASE_FLAGS) ;

LINKFLAGS =
  -ios_version_min $(IOS_MINVER).0
  -syslibroot "$(IPHONE_SDK_DIR)"
  -lSystem -lcrt1.o -lgcc_s.1 -lstdc++
  -F"\"$(IPHONE_SDK_DIR)/System/Library/Frameworks\""
  $(IOS_FRAMEWORKS)
;
