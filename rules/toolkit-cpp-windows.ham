if $(BUILD) = da {
  # Build with the sanitizer in debug mode
  CLANG_SANITIZE ?= 1 ;
}

STRICT_ALIASING_FLAGS = -fno-strict-aliasing ;

CLANG_CC_ARGS +=
-ffunction-sections
-fdata-sections
-fvisibility=hidden
-Wno-inconsistent-missing-override
-Wno-ignored-attributes
-Wno-switch
-Wno-return-type-c-linkage
-Wno-return-type
-Wno-c++11-narrowing
-Wno-format
-Wno-uninitialized
-Wno-int-to-pointer-cast
-Wno-int-to-void-pointer-cast
-Wno-unused-value
-Wno-#pragma-messages
-Wno-macro-redefined
-Wno-pointer-to-int-cast
-Wno-deprecated-declarations
-Wno-tautological-pointer-compare
-Wno-tautological-constant-out-of-range-compare
-Wno-shift-negative-value
-Wno-nonportable-include-path
-Wno-non-literal-null-conversion
-Wno-implicit-function-declaration
;

# set(triple x86_64-pc-win32)

CLANG_CPP_ARGS +=
  -std=$(C++VERSION)
  -Wno-c++11-narrowing
;

LINKFLAGS +=
  -fvisibility=hidden
  -ffunction-sections
  -fdata-sections
;

if $(FLYMAKE) = 1 {
  # Happens when we're compiling header files with flymake since the temporary
  # flymake file is a cpp file.
  CLANG_CC_ARGS +=
    -Wno-pragma-once-outside-header
  ;
}

# TODO: This should be under Lint?
if $(CLANG_ANALYZER) = 1 {
  CLANG_CC_ARGS += -DCLANG_ANALYZER=1 --analyze ;
  ECHO "W/Building with Clang's static analyzer" ;
}
if $(CLANG_SANITIZE) = 1 {
  CLANG_CC_ARGS += -DCLANG_SANITIZE=1 -fsanitize=address ;
  ECHO "W/Building with -fsanitize=address" ;
}

CCFLAGS   += $(CLANG_CC_ARGS) ;
C++FLAGS  += $(CLANG_CC_ARGS) $(CLANG_CPP_ARGS) ;

if $(FLYMAKE) = 1 {
  CLANG_DBG_ARGS = -O0 $(STRICT_ALIASING_FLAGS) ;
  # CLANG_DBG_ARGS = -ggdb -O0 $(STRICT_ALIASING_FLAGS) ;
  CLANG_OPT_ARGS = $(CLANG_DBG_ARGS) ;
}
else {
  ### "Debug" (da) build flags ###
  CLANG_DBG_ARGS = -ggdb -O0 $(STRICT_ALIASING_FLAGS) ;
  ### Optimized (ra) build flags ###
  CLANG_OPT_ARGS = -ggdb -O2 $(STRICT_ALIASING_FLAGS) ;
}

### Link flags ###
if $(CLANG_SANITIZE) = 1 {
  LINKFLAGS += -fsanitize=address ;
}
LINKLIBS += ;

rule tkCC++Build
{
  local t = $(<) ;
  local strOpt = "" ;
  # Set the debug infos generation
  # Set the optimization flags
  if $(DEBUG) = 1 {
    PKGOPTIM += $(CLANG_DBG_ARGS) ;
    strOpt += "(DebugOnly) " ;
  }
  # Set debug-only flags
  else {
    PKGOPTIM += $(CLANG_OPT_ARGS) ;
    strOpt += "(Optimized) " ;
  }
  logVerbose "- CC++Build: " $(strOpt) ;
}

rule tkC++Exceptions {
  ObjectC++Flags $(<) : -fexceptions ;
}
rule tkNoC++Exceptions {
  ObjectC++Flags $(<) : -fno-exceptions ;
  # Needed to disable exception usage in the standard C++ library
  ObjectDefines $(<) : _HAS_EXCEPTIONS=0 ;
}

rule tkC++RTTI {
  ObjectC++Flags $(<) : -frtti ;
}
rule tkNoC++RTTI {
  ObjectC++Flags $(<) : -fno-rtti ;
}

rule tkCC++Lint {
}
