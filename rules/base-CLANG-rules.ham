actions together piecemeal Archive
{
  $(AR) "$(<)" "$(>:T)"
}

if $(OS) = MACOSX
{
  if ! $(MACOSX_ARCH) {
    if $(OSPLAT:U) = X64 {
      MACOSX_ARCH = x86_64 ;
    }
    else if $(OSPLAT:U) = X86 {
      MACOSX_ARCH = x86 ;
    }
    else if $(OSPLAT:U) = ARM64 {
      MACOSX_ARCH = arm64 ;
    }
    else {
      EXIT "E/Unknown OSPlat for MacOS:" $(OSPLAT) ;
    }
  }

  # cf https://en.wikipedia.org/wiki/MacOS_version_history
  # 10.10 Yosemite (2014)
  # 10.11 El Capitan (2015)
  # 10.12 Sierra (2016)
  # 10.13 High Sierra (2017)
  # 10.14 Mojave (2018)
  # 10.15 Catalina (2019)
  # 11 Big Sur (2020)
  # 12 Monterey (2021)
  # 13 Ventura (2022)
  # 14 Sonoma (2023)
  MACOSX_MINVER ?= 11 ;

  CLANG_BASE_FLAGS =
    -arch $(MACOSX_ARCH)
    -mmacosx-version-min=$(MACOSX_MINVER)
    -isysroot $(MACOS_SDK_PATH) # System sdk path, macOS only
  ;

  CCFLAGS += $(CLANG_BASE_FLAGS) ;
  C++FLAGS += $(CLANG_BASE_FLAGS) ;
  LINKFLAGS += $(CLANG_BASE_FLAGS) ;

  LINKFLAGS_DLL = -rpath "@loader_path/." ;
  LINKFLAGS_EXE = -rpath "@loader_path/." ;
  actions DllLink
  {
    $(LINK) -install_name @rpath/"$(<:B:S)" $(LINKFLAGS) $(LINKFLAGS_DLL) -dynamiclib "$(>)" $(NEEDLIBS) $(LINKLIBS) $(SYSTEM_LINKLIBS) -o "$(<)"
  }
  actions Link bind NEEDLIBS
  {
    $(LINK) $(LINKFLAGS) $(LINKFLAGS_EXE) $(UNDEFS) "$(>)" $(NEEDLIBS) $(LINKLIBS) $(SYSTEM_LINKLIBS) -o "$(<)"
  }
}
else if $(OS) = LINUX {
  #
  # This setup addresses several complexities involved with dynamic and
  # static linking in Linux, particularly when dealing with absolute
  # paths to shared libraries (.so files) during the build process.
  #
  # Problem:
  # In the initial build process, absolute paths to shared libraries
  # were being hardcoded into the ELF binary's NEEDED section, causing
  # issues with portability. This was undesirable because binaries were
  # bound to specific paths where the libraries were compiled, instead
  # of being able to rely on relative paths (e.g., $ORIGIN) for finding
  # shared libraries at runtime.
  #
  # Solution:
  # 1. **-rpath with $ORIGIN**:
  #    To avoid hardcoded paths, the linker flag `-Wl,-rpath,'$ORIGIN'`
  #    is added for both shared libraries (DLLs) and executables. The
  #    `$ORIGIN` variable ensures that the binary will look for shared
  #    libraries in its own directory or relatively from where it resides
  #    at runtime. This solves the portability issue by allowing libraries
  #    to be located without needing absolute paths hardcoded into the ELF
  #    binary.
  #
  # 2. **Processing LINKLIBS**:
  #    `LINKLIBS` contains both dynamic libraries (shared objects, .so)
  #    and static libraries or other linker flags. If absolute paths are
  #    passed for shared libraries during the link phase, they would be
  #    hardcoded in the binary, causing the same portability issues.
  #
  #    To avoid this, the `process_linklibs()` function processes each
  #    item in `LINKLIBS`, detects shared libraries by checking for `.so`,
  #    extracts the directory (`-L`) and library name (`-l`), and passes
  #    these to the linker using standard flags. This replaces the absolute
  #    paths with `-L<dir>` and `-l<library>`, ensuring the dynamic linker
  #    can resolve the libraries using `rpath`.
  #
  #    The function also handles other linker flags or static libraries
  #    passed via `LINKLIBS` and includes them without modification. This
  #    way, the static libraries and flags remain unaffected, while shared
  #    libraries benefit from proper dynamic linking.
  #
  LINKFLAGS += -fuse-ld=lld -Wl,--gdb-index -Wl,-rpath,'$ORIGIN' ;

  actions DllLink bind NEEDLIBS
  {
    function process_linklibs() {
      local linklibs="$1"
      local processed_linklibs=()

      eval "local linklibs_array=($linklibs)"
      for lib in "${linklibs_array[@]}"; do
        if [[ "$lib" == *.so* ]]; then
          lib_dir=`dirname "$lib"`
          lib_filename=`basename "$lib"`
          processed_linklibs+=(-L"$lib_dir" -l:"$lib_filename")
        else
          processed_linklibs+=("$lib")
        fi
      done
      echo "${processed_linklibs[@]}"
    }
    PROCESSED_LINKLIBS=`process_linklibs " $(LINKLIBS) "`

    $(LINK) $(LINKFLAGS) $(LINKFLAGS_DLL) -shared -o "$(<)" $(UNDEFS) "$(>)" $(NEEDLIBS) ${PROCESSED_LINKLIBS[@]} $(SYSTEM_LINKLIBS)
  }

  actions Link bind NEEDLIBS
  {
    function process_linklibs() {
      local linklibs="$1"
      local processed_linklibs=()

      eval "local linklibs_array=($linklibs)"
      for lib in "${linklibs_array[@]}"; do
        if [[ "$lib" == *.so* ]]; then
          lib_dir=`dirname "$lib"`
          lib_filename=`basename "$lib"`
          processed_linklibs+=(-L"$lib_dir" -l:"$lib_filename")
        else
          processed_linklibs+=("$lib")
        fi
      done
      echo "${processed_linklibs[@]}"
    }
    PROCESSED_LINKLIBS=`process_linklibs " $(LINKLIBS) "`

    $(LINK) $(LINKFLAGS) $(LINKFLAGS_EXE) $(UNDEFS) "$(>)" $(NEEDLIBS) ${PROCESSED_LINKLIBS[@]} $(SYSTEM_LINKLIBS) -o "$(<)"
  }
}
else if $(OS) = NT {
  DLLIMPLIB = 1 ;
  AR = llvm-lib ;
  RC = llvm-rc ;

  CLANG_BASE_FLAGS =
    -target x86_64-pc-windows-msvc # target platform
    -fms-compatibility
  ;

  rule ResourceCompiler {
    DEPENDS $(<) : $(>) ;
    Clean clean : $(<) ;
  }
  actions ResourceCompiler {
    $(RC) -fo "$(<)" $(CCHDRS) $(RCFLAGS) "$(>)"
  }

  actions Archive {
    $(AR) -NOLOGO -WX:NO -out:"$(<)" "$(>)"
  }

  actions DllLink
  {
    $(LINK) $(LINKFLAGS) $(LINKFLAGS_DLL) "$(>)" $(NEEDLIBS) $(LINKLIBS) $(SYSTEM_LINKLIBS) -o "$(<)"
  }
  actions Link bind NEEDLIBS
  {
    $(LINK) $(LINKFLAGS) $(LINKFLAGS_EXE) $(UNDEFS) "$(>)" $(NEEDLIBS) $(LINKLIBS) $(SYSTEM_LINKLIBS) -o "$(<)"
  }
}
else {
  actions DllLink
  {
    $(LINK) $(LINKFLAGS) $(LINKFLAGS_DLL) "$(>)" $(NEEDLIBS) $(LINKLIBS) $(SYSTEM_LINKLIBS) -o "$(<)"
  }
  actions Link bind NEEDLIBS
  {
    $(LINK) $(LINKFLAGS) $(LINKFLAGS_EXE) $(UNDEFS) "$(>)" $(NEEDLIBS) $(LINKLIBS) $(SYSTEM_LINKLIBS) -o "$(<)"
  }
}
