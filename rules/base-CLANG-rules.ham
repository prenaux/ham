actions together piecemeal Archive
{
  $(AR) "$(<)" "$(>:T)"
}

if $(OS) = MACOSX
{
  if ! $(MACOSX_ARCH) {
    if $(OSPLAT:U) = X64 {
      MACOSX_ARCH = x86_64 ;
    }
    else if $(OSPLAT:U) = X86 {
      MACOSX_ARCH = x86 ;
    }
    else if $(OSPLAT:U) = ARM64 {
      MACOSX_ARCH = arm64 ;
    }
    else {
      EXIT "E/Unknown OSPlat for MacOS:" $(OSPLAT) ;
    }
  }

  # cf https://en.wikipedia.org/wiki/MacOS_version_history
  # 10.10 Yosemite
  # 10.11 El Capitan
  # 10.12 Sierra
  # 10.13 High Sierra
  # 10.14 Mojave
  # 10.15 Catalina
  # 11 Big Sur
  MACOSX_MINVER ?= 10.14 ;

  CLANG_BASE_FLAGS =
    -arch $(MACOSX_ARCH)
    -mmacosx-version-min=$(MACOSX_MINVER)
    -isysroot $(MACOS_SDK_PATH) # System sdk path, macOS only
  ;

  CCFLAGS += $(CLANG_BASE_FLAGS) ;
  C++FLAGS += $(CLANG_BASE_FLAGS) ;
  LINKFLAGS += $(CLANG_BASE_FLAGS) ;

  LINKFLAGS_DLL = -rpath "@loader_path/." ;
  LINKFLAGS_EXE = -rpath "@loader_path/." ;
  actions DllLink
  {
    $(LINK) -install_name @rpath/"$(<:B:S)" $(LINKFLAGS) $(LINKFLAGS_DLL) -dynamiclib "$(>)" $(NEEDLIBS) $(LINKLIBS) $(SYSTEM_LINKLIBS) -o "$(<)"
  }
  actions Link bind NEEDLIBS
  {
    $(LINK) $(LINKFLAGS) $(LINKFLAGS_EXE) $(UNDEFS) "$(>)" $(NEEDLIBS) $(LINKLIBS) $(SYSTEM_LINKLIBS) -o "$(<)"
  }
}
else if $(OS) = LINUX {
  LINKFLAGS += -fuse-ld=lld -Wl,--gdb-index ;

  actions DllLink bind NEEDLIBS
  {
    $(LINK) $(LINKFLAGS) $(LINKFLAGS_DLL) -fvisibility=hidden -shared -o "$(<)" $(UNDEFS) "$(>)" $(NEEDLIBS) $(LINKLIBS) $(SYSTEM_LINKLIBS)
  }
  actions Link bind NEEDLIBS
  {
    $(LINK) $(LINKFLAGS) $(UNDEFS) "$(>)" $(NEEDLIBS) $(LINKLIBS) $(SYSTEM_LINKLIBS) -o "$(<)"
  }

}
else {

  actions DllLink
  {
    $(LINK) $(LINKFLAGS) "$(>)" $(NEEDLIBS) $(LINKLIBS) $(SYSTEM_LINKLIBS) -o "$(<)"
  }
  actions Link bind NEEDLIBS
  {
    $(LINK) $(LINKFLAGS) $(UNDEFS) "$(>)" $(NEEDLIBS) $(LINKLIBS) $(SYSTEM_LINKLIBS) -o "$(<)"
  }

}
