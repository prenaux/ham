if [ SubDirOnce TOP toolsets thrift_cppm ] = 1 { return ; }

ECHO "... THRIFT_CPPM ..." ;

### env setup ###########################################################
THRIFT_CPPM_HAS_SSL = 0 ;
THRIFT_CPPM_HAS_SERVER = 0 ;
THRIFT_CPPM_HAS_THRIFTC = 0 ;

if $(TARGET_OS) = LINUX || $(TARGET_OS) = MACOSX || $(TARGET_OS) = NT {
  #
  # We actually don't need SSL in Thrift as we use CURL to connect to SSL
  # services from C++ atm (see niLang's niThrift). Also we'd need a robust
  # OpenSSL build script because whatever is coming prebuilt in package
  # managers is frought with various issues that create incompatibilities and
  # breaks builds in various way.
  #
  # THRIFT_CPPM_HAS_SSL = 1 ;
  THRIFT_CPPM_HAS_SERVER = 1 ;
  THRIFT_CPPM_HAS_THRIFTC = 1 ;
}

# ECHO "... TARGET_OS:" $(TARGET_OS) ;
# ECHO "... THRIFT_CPPM_HAS_SSL:" $(THRIFT_CPPM_HAS_SSL) ;
# ECHO "... THRIFT_CPPM_HAS_SERVER:" $(THRIFT_CPPM_HAS_SERVER) ;
# ECHO "... THRIFT_CPPM_HAS_THRIFTC:" $(THRIFT_CPPM_HAS_THRIFTC) ;

### thrift_cppm #########################################################
tkDefModuleLib thrift_cppm : 1.0.0 ;
hamToolsetHdrs boost_cppm ;

SubDirHdrs $(SUBDIR) github-thrift lib cpp src ;
SubDirHdrs $(SUBDIR) include ;

# Copied from github-thrift/lib/cpp/CMakeLists.txt
SRC =

# src/thrift/
[ tkPkgSrcSubDirLst [ FDirName github-thrift lib cpp src thrift ] :
  TApplicationException.cpp
  TOutput.cpp
]

# src/thrift/async/
[ tkPkgSrcSubDirLst [ FDirName github-thrift lib cpp src thrift async ] :
  TAsyncChannel.cpp
  TAsyncProtocolProcessor.cpp
  TConcurrentClientSyncInfo.cpp
]

# src/thrift/concurrency/
[ tkPkgSrcSubDirLst [ FDirName github-thrift lib cpp src thrift concurrency ] :
  ThreadManager.cpp
  TimerManager.cpp
  ThreadFactory.cpp
  Thread.cpp
  Monitor.cpp
  Mutex.cpp
]

# src/thrift/processor/
[ tkPkgSrcSubDirLst [ FDirName github-thrift lib cpp src thrift processor ] :
  PeekProcessor.cpp
]

# src/thrift/protocol/
[ tkPkgSrcSubDirLst [ FDirName github-thrift lib cpp src thrift protocol ] :
  TBase64Utils.cpp
  TDebugProtocol.cpp
  TJSONProtocol.cpp
  TMultiplexedProtocol.cpp
  TProtocol.cpp
]

# src/thrift/transport/
[ tkPkgSrcSubDirLst [ FDirName github-thrift lib cpp src thrift transport ] :
  TTransportException.cpp
  TFDTransport.cpp
  TSimpleFileTransport.cpp
  THttpTransport.cpp
  THttpClient.cpp
  TSocket.cpp
  TSocketPool.cpp
  TTransportUtils.cpp
  TBufferTransports.cpp
  SocketCommon.cpp
] ;

# SSL
if $(THRIFT_CPPM_HAS_SSL) = 1 {
  # SSL src/thrift/transport/
  SRC += [ tkPkgSrcSubDirLst [ FDirName github-thrift lib cpp src thrift transport ] :
    TSSLSocket.cpp
  ] ;
}

# Server
if $(THRIFT_CPPM_HAS_SERVER) = 1 {

  # src/thrift/server/
  SRC += [ tkPkgSrcSubDirLst [ FDirName github-thrift lib cpp src thrift server ] :
    TConnectedClient.cpp
    TServerFramework.cpp
    TSimpleServer.cpp
    TThreadPoolServer.cpp
    TThreadedServer.cpp
  ] ;

  # src/thrift/transport/
  SRC += [ tkPkgSrcSubDirLst [ FDirName github-thrift lib cpp src thrift transport ] :
    THttpServer.cpp
    TServerSocket.cpp
  ] ;

  if $(THRIFT_CPPM_HAS_SSL) = 1 {
    # SSL src/thrift/transport/
    SRC += [ tkPkgSrcSubDirLst [ FDirName github-thrift lib cpp src thrift transport ] :
      TSSLServerSocket.cpp
      TWebSocketServer.cpp
    ] ;
  }
}

# Windows
if $(TARGET_OS) = NT {
  # src/thrift/windows/
  SRC += [ tkPkgSrcSubDirLst [ FDirName github-thrift lib cpp src thrift windows ] :
    GetTimeOfDay.cpp
    OverlappedSubmissionThread.cpp
    SocketPair.cpp
    TWinsockSingleton.cpp
    WinFcntl.cpp
  ] ;
}

AssertFExists thrift_cppm : $(SRC) ;

BUILD_SRC = [ tkBuildPackage $(SRC) : exc rtti : $(CHK_SOURCES) : $(SRC_EXTRA) ] ;
ObjectDefines $(BUILD_SRC) : BOOST_ALL_NO_LIB=1 thrift_EXPORTS=1 ;

if $(TARGET_OS) = MACOSX {
  if $(THRIFT_CPPM_HAS_SSL) = 1 {
    LINKLIBS on $(PKGTARGET) += -L$(OPENSSL_LIBDIR) -lcrypto -lssl ;
    ObjectHdrs $(BUILD_SRC) : [ FDirName $(OPENSSL_INCDIR) ] ;
  }
}
if $(TARGET_OS) = NT {
  LINKLIBS on $(PKGTARGET) += Ws2_32.lib ;
}

### ham_thriftc #########################################################
if $(THRIFT_CPPM_HAS_THRIFTC) = 1 {

  tkDefTool ham_thriftc : 1.0.0 ;

  SubDirHdrs $(SUBDIR) github-thrift compiler cpp src ;

  SRC =

  # NOTE: gen'd by _gen_parser.sh
  [ tkPkgSrcSubDirLst [ FDirName github-thrift compiler cpp src thrift ] :
    thrifty.cc
    thriftl.cc
  ]

  [ tkPkgSrcSubDirLst [ FDirName github-thrift compiler cpp src thrift ] :
      common.cc
  ]

  [ tkPkgSrcSubDirLst [ FDirName github-thrift compiler cpp src thrift generate ] :
      t_generator.cc
      validator_parser.cc
      t_cpp_generator.cc
      t_html_generator.cc
      t_java_generator.cc
      t_js_generator.cc
      t_json_generator.cc
      t_markdown_generator.cc
      t_php_generator.cc
      t_py_generator.cc
      t_rs_generator.cc
      t_swift_generator.cc
      t_xml_generator.cc
      t_xsd_generator.cc
  ]

  [ tkPkgSrcSubDirLst [ FDirName github-thrift compiler cpp src thrift parse ] :
      t_typedef.cc
      parse.cc
  ]

  [ tkPkgSrcSubDirLst [ FDirName github-thrift compiler cpp src thrift ] :
      main.cc
  ]

  [ tkPkgSrcSubDirLst [ FDirName github-thrift compiler cpp src thrift audit ] :
      t_audit.cpp
  ]
  ;

  BUILD_SRC = [ tkBuildPackage $(SRC) : minsz exc : $(CHK_SOURCES) : $(SRC_EXTRA) ] ;
}
