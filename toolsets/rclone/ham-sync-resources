#!/bin/bash
export HAM_NO_VER_CHECK=1
if [[ -z "$HAM_HOME" ]]; then
  log_error "HAM_HOME not set !"
  exit 1
fi
. "$HAM_HOME/bin/ham-bash-setenv.sh"

# the help
usage() {
  echo ""
  echo "usage: ham-sync-resources project dir command (doit)"
  echo ""
  echo "  ham-rclone is used to sync the resources, it expects a rclone.conf"
  echo "  with a config for the specified project name."
  echo ""
  echo "command:"
  echo "  pull_keep    Pull data from the server to the local data folder."
  echo "  push_keep    Push data from the local data folder to the server."
  echo ""
  echo "  pull_delete  Pull data from the server to the local data folder,"
  echo "               deletes from the local copy any file not present."
  echo "               on the server. Deleted files are moved to a backup_sync"
  echo "               folder on the destination."
  echo "  push_delete  Push data from the local data folder to the server,"
  echo "               deletes from the server any file not present locally."
  echo "               Deleted files are moved to a backup_sync folder on the"
  echo "               destination."
  echo ""
  echo "  pull         Alias for pull_delete."
  echo "  push         Alias for push_delete."
  echo "  ls_remote    List the files currently on the server."
  echo "  ls_local     List the files currently on the server."
  echo ""
  echo "example:"
  echo "  # Get the new data from the server (dry run)"
  echo "  ham-sync-resources Playground_202010 . pull"
  echo "  # Get the new data from the server"
  echo "  ham-sync-resources Playground_202010 . pull doit"
  echo "  # Push the new data from the server (dry run)"
  echo "  ham-sync-resources Playground_202010 . push"
  echo "  # Push the new data from the server"
  echo "  ham-sync-resources Playground_202010 . push doit"
  echo ""

  if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    # sourced...
    return 1
  else
    # regular call
    exit 1
  fi
}

SYNC_PROJECT=$1
shift
if [[ -z "$SYNC_PROJECT" ]]; then
  log_error "Project not specified."
  usage
  exit 1
fi

SYNC_DIR=$1
shift
if [[ -z "$SYNC_DIR" ]]; then
  log_error "Dir not specified."
  usage
  exit 1
fi

SYNC_COMMAND=$1
shift
if [[ -z "$SYNC_COMMAND" ]]; then
  log_error "Command not specified."
  usage
  exit 1
fi

if [[ "$1" == "doit" ]]; then
  log_info "Do it."
  DOIT="yes"
  shift
else
  DOIT=""
fi

# Local & destination folders
BASE_LOCAL_DIR="$(pwd)/src"
if [[ -e "$BASE_LOCAL_DIR/_sync_data" ]]; then
  BASE_LOCAL_DIR="$(pwd)/src"
else
  BASE_LOCAL_DIR="$(pwd)/data"
fi

if [ "$SYNC_DIR" == "." ]; then
  LOCAL_DIR="${BASE_LOCAL_DIR}"
  BACKUP_LOCAL_DIR="${BASE_LOCAL_DIR}_backup_sync"
else
  LOCAL_DIR="${BASE_LOCAL_DIR}/${SYNC_DIR}"
  BACKUP_LOCAL_DIR="${BASE_LOCAL_DIR}_backup_sync/${SYNC_DIR}"
fi

BASE_REMOTE_DIR="/ham_sync/$SYNC_PROJECT"
BACKUP_REMOTE_DIR="/ham_sync/${SYNC_PROJECT}_backup_sync/${SYNC_DIR}"
REMOTE_DIR="${BASE_REMOTE_DIR}/${SYNC_DIR}"

# Validate using _sync_data
SYNC_DATA_PATH="$BASE_LOCAL_DIR/_sync_data"
if [[ ! -e "$SYNC_DATA_PATH" ]]; then
  log_error "Couldn't find '$SYNC_DATA_PATH' which is required to make sure that you're syncing the right folder."
  exit 1
fi
SYNC_DATA_SYNC_PROJECT=$(head -1 "$SYNC_DATA_PATH")
if [[ "$SYNC_DATA_SYNC_PROJECT" != "# $SYNC_PROJECT" ]]; then
  log_error "_sync_data project name doesnt match, expecting '# $SYNC_PROJECT', but _sync_data says '$SYNC_DATA_SYNC_PROJECT'."
  log_info "The _sync_data file should use the rclone filter file format with the commented project name as the first line."
  log_info "See: https://rclone.org/filtering/#filter-from-read-filtering-patterns-from-a-file"
  exit 1
fi

log_info "Sync Project: $SYNC_PROJECT"

FILTER_PARAM=(--filter-from "$SYNC_DATA_PATH")

PARAMS=()
if [[ "$SYNC_COMMAND" != "arch_"* ]]; then
  PARAMS=("${PARAMS[@]}" "${FILTER_PARAM[@]}")
fi
# PARAMS=("${PARAMS[@]}" --fast-list)
# PARAMS=("${PARAMS[@]}" --max-age 1h)
# dont considered a file changed if there's only a 2s diff, thats the accuracy of the FAT filesystem
PARAMS=("${PARAMS[@]}" --modify-window 2s)
PARAMS=("${PARAMS[@]}" --stats-one-line)
PARAMS=("${PARAMS[@]}" --checkers="${HAM_SYNC_NUM_CHECKERS:-24}")
PARAMS=("${PARAMS[@]}" --transfers="${HAM_SYNC_NUM_TRANSFERS:-16}")
PARAMS=("${PARAMS[@]}" --stats 60s)
PARAMS=("${PARAMS[@]}" -v)
PARAMS=("${PARAMS[@]}" --progress)
if [ "$DOIT" != "yes" ]; then
  PARAMS=("${PARAMS[@]}" --dry-run)
fi

arch_init() {
  export ARCH_NAME=$1
  if [ -z "$ARCH_NAME" ]; then
    log_error "Archive name not specified."
    usage
  fi
  shift
  export ARCH_VERTAG=$1
  if [ -z "$ARCH_VERTAG" ]; then
    log_error "Archive version tag not specified."
    usage
  fi
  shift
  export ARCH_FN="$LOCAL_DIR/_arch_${ARCH_NAME}_${ARCH_VERTAG}.7z"
  export ARCH_DIR="$LOCAL_DIR/arch-${ARCH_NAME}"

  log_info "ARCH_FN: $ARCH_FN"
  log_info "ARCH_DIR: $ARCH_DIR"
  log_info "ARCH_VERTAG: $ARCH_VERTAG"
}

case "$SYNC_COMMAND" in
  push_keep)
    log_info "Pushing from data to server..."
    (
      set -x
      ham-rclone copy "${PARAMS[@]}" "$LOCAL_DIR" "$SYNC_PROJECT:$REMOTE_DIR"
    )
    ;;
  push_delete | push)
    log_info "Pushing from data to server, and deleting files removed locally from the server..."
    (
      set -x
      ham-rclone sync "${PARAMS[@]}" --backup-dir "$SYNC_PROJECT:${BACKUP_REMOTE_DIR}" "$LOCAL_DIR" "$SYNC_PROJECT:$REMOTE_DIR"
    )
    ;;
  pull_keep)
    log_info "Pulling from server to local data folder..."
    (
      set -x
      ham-rclone copy "${PARAMS[@]}" "$SYNC_PROJECT:$REMOTE_DIR" "$LOCAL_DIR"
    )
    ;;
  pull_delete | pull)
    log_info "Pulling from server to local data folder, and deleting local files that have been removed from the server..."
    (
      set -x
      ham-rclone sync "${PARAMS[@]}" --backup-dir "${BACKUP_LOCAL_DIR}" "$SYNC_PROJECT:$REMOTE_DIR" "$LOCAL_DIR"
    )
    ;;
  ls_local)
    log_info "Listing files on the local..."
    (
      set -x
      ham-rclone ls "${FILTER_PARAM[@]}" "$LOCAL_DIR"
    )
    ;;
  ls_remote)
    log_info "Listing files on the remote..."
    (
      set -x
      ham-rclone ls "${FILTER_PARAM[@]}" "$SYNC_PROJECT:$REMOTE_DIR"
    )
    ;;
  arch_make)
    log_info "Making archive..."
    arch_init "$1" "$2"
    (
      set -x
      7z-pack-arch "$ARCH_FN" "$ARCH_DIR" "$ARCH_VERTAG"
    )
    ;;
  arch_push)
    log_info "Push an archive..."
    arch_init "$1" "$2"
    if [ -e "$ARCH_FN" ]; then
      log_info "Archive already exist."
    else
      log_info "Making archive..."
      (
        set -x
        7z-pack-arch "$ARCH_FN" "$ARCH_DIR" "$ARCH_VERTAG"
      )
    fi
    log_info "Pushing to server..."
    BASENAME=$(basename "$ARCH_FN")
    (
      set -x
      ham-rclone copy "${PARAMS[@]}" "$LOCAL_DIR/$BASENAME" "$SYNC_PROJECT:$REMOTE_DIR"
    )
    ;;
  arch_pull)
    log_info "Pull an archive..."
    arch_init "$1" "$2"
    ARCH_TAG_FN="$ARCH_DIR/arch_tag_${ARCH_VERTAG}"
    log_info "ARCH_TAG_FN: $ARCH_TAG_FN"
    if [ -e "$ARCH_TAG_FN" ]; then
      log_info "Archive already downloaded and unpacked, nothing to do."
    else
      if [ -e "$ARCH_FN" ]; then
        log_info "Archive already downloaded."
      else
        log_info "Getting archive..."
        BASENAME=$(basename "$ARCH_FN")
        (
          set -x
          ham-rclone copy "${PARAMS[@]}" "$SYNC_PROJECT:$REMOTE_DIR/$BASENAME" "$LOCAL_DIR"
        )
      fi
      log_info "Unpacking archive..."
      (
        set -x
        rm -Rf "$ARCH_DIR"
        7z-unpack-arch "$ARCH_FN" "$ARCH_DIR" "$ARCH_VERTAG"
        rm "$ARCH_FN"
      )
    fi
    ;;
  *)
    log_error "Unknown command '$SYNC_COMMAND'"
    usage
    ;;
esac

log_info "Done"
