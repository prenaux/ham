#!/bin/bash
. "$HAM_HOME/bin/ham-bash-setenv.sh"

help() {
  echo ""
  echo "git-export-patch command (file.patch)"
  echo ""
  echo "commands:"
  echo "  diff: Creates a patch with the current (unstaged) changes"
  echo "  staged: Creates a patch with the currently staged changes"
  echo "  master: Creates a patch with everything that is on top of master"
  echo "  check: Check the specified patch file"
  echo "  view: View the content of the patch"
  echo ""
  if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    # sourced...
    return 1
  else
    # regular call
    exit 1
  fi
}

PWD=$(pwd)
DIRNAME=$(basename "$PWD")

COMMAND=$1
shift
FILE=$1
shift
if [ -z "$FILE" ]; then
  FILE=$HOME/patch-$DIRNAME-$(arch_date).patch
fi

case $COMMAND in
  master)
    git format-patch master --full-index --stdout >$FILE
    errcheck $? git_patch "Couldn't export git master patch"
    echo "I/Patch exported to '$FILE'"
    ls -lah $FILE
    ;;
  diff)
    git diff --binary >$FILE
    errcheck $? git_patch "Couldn't export git diff patch"
    echo "I/Patch exported to '$FILE'"
    ls -lah $FILE
    ;;
  staged)
    git diff --cached --binary >$FILE
    errcheck $? git_patch "Couldn't export git patch of staged files"
    echo "I/Patch exported to '$FILE'"
    ls -lah $FILE
    ;;
  check)
    git apply --check "$FILE"
    errcheck $? git_patch "Patch check failed."
    git apply --index "$FILE"
    errcheck $? git_patch "Patch index failed."
    ;;
  view)
    git apply --stat "$FILE"
    errcheck $? git_patch "Patch view failed."
    ;;
  *)
    echo "E/Unknown patch command '$1'"
    help
    ;;
esac
