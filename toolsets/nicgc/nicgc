#!/bin/bash
. ham-bash-lib.sh
CWD=`pwd`
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$CWD"

case $HAM_OS in
    OSX*)
        # set -ex
        echo "I/nicgc running in Wine on macOS"
        if [ "$1" == "-v" ]; then
            if [ ! -e "$SCRIPT_DIR/osx-x64/bin-nt-x64/nicgc_ra.exe" ]; then
                echo "E/Can't find nicgc_ra.exe at: $SCRIPT_DIR/osx-x64/bin-nt-x64/nicgc_ra.exe"
                exit 1
            fi
            # This is a hack, wine is attrociously slow when we pipe the
            # output which we do when initializing the toolsets. By slow I
            # mean: -v takes 3-4s vs < 0.5s when not pipeing.
            echo "Ni Shader Compiler Version 5.0"
        else
            WINEDEBUG=-all "$WINE_USR_DIR/bin/wine64" "$SCRIPT_DIR/osx-x64/bin-nt-x64/nicgc_ra.exe" "$@"
        fi
        ;;
    NT*)
        # TODO: It should probably become a downloadable toolset, right now
        #       you need to have the niLang in your WORK folder for this to
        #       work
        NILANG_DIR="${SCRIPT_DIR}/../../../niLang"
        . "$NILANG_DIR/bin/ni-bash-setenv.sh" ra
        if [ -e "$DIR1/$BIN_LOA/ni_$BUILD$BIN_EXT" ]; then
            export NI_CGC_EXE="$DIR1/$BIN_LOA/nicgc_$BUILD$BIN_EXT"
        elif [ -e "$DIR1/bin/$BIN_LOA/nicgc_$BUILD$BIN_EXT" ]; then
            export NI_CGC_EXE="$DIR1/bin/$BIN_LOA/nicgc_$BUILD$BIN_EXT"
        elif [ -e "$DIR2/$BIN_LOA/nicgc_$BUILD$BIN_EXT" ]; then
            export NI_CGC_EXE="$DIR2/$BIN_LOA/nicgc_$BUILD$BIN_EXT"
        else
            export NI_CGC_EXE="cantfind_ni_$BUILD"
        fi
        "${NI_CGC_EXE}" "$@"
        ;;
    LINUX*)
        echo "I/nicgc running in Wine on Linux"
        if [ "$1" == "-v" ]; then
            if [ ! -e "$SCRIPT_DIR/lin-x64/bin-nt-x64/nicgc_ra.exe" ]; then
                echo "E/Can't find nicgc_ra.exe at: $SCRIPT_DIR/lin-x64/bin-nt-x64/nicgc_ra.exe"
                exit 1
            fi
            # This is a hack, wine is attrociously slow when we pipe the
            # output which we do when initializing the toolsets. By slow I
            # mean: -v takes 3-4s vs < 0.5s when not pipeing.
            echo "Ni Shader Compiler Version 5.0"
        else
            WINEDEBUG=-all wine64 "$SCRIPT_DIR/lin-x64/bin-nt-x64/nicgc_ra.exe" "$@"
        fi
        ;;
    *)
        echo "E/Toolset: Unsupported host OS"
        return 1
        ;;
esac
